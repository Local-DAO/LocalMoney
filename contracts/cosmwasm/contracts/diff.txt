diff --git a/contracts/cosmwasm/Cargo.lock b/contracts/cosmwasm/Cargo.lock
index 858a632..8869261 100644
--- a/contracts/cosmwasm/Cargo.lock
+++ b/contracts/cosmwasm/Cargo.lock
@@ -8,7 +8,7 @@ version = "0.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "3e61f2b7f93d2c7d2b08263acaa4a363b3e276806c68af6134c44f523bf1aacd"
 dependencies = [
- "gimli",
+ "gimli 0.25.0",
 ]
 
 [[package]]
@@ -23,16 +23,155 @@ version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47"
 dependencies = [
- "getrandom 0.2.3",
+ "getrandom 0.2.15",
  "once_cell",
  "version_check",
 ]
 
+[[package]]
+name = "ahash"
+version = "0.8.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011"
+dependencies = [
+ "cfg-if",
+ "once_cell",
+ "version_check",
+ "zerocopy",
+]
+
+[[package]]
+name = "allocator-api2"
+version = "0.2.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923"
+
+[[package]]
+name = "ark-bls12-381"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c775f0d12169cba7aae4caeb547bb6a50781c7449a8aa53793827c9ec4abf488"
+dependencies = [
+ "ark-ec",
+ "ark-ff",
+ "ark-serialize",
+ "ark-std",
+]
+
+[[package]]
+name = "ark-ec"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "defd9a439d56ac24968cca0571f598a61bc8c55f71d50a89cda591cb750670ba"
+dependencies = [
+ "ark-ff",
+ "ark-poly",
+ "ark-serialize",
+ "ark-std",
+ "derivative",
+ "hashbrown 0.13.2",
+ "itertools",
+ "num-traits",
+ "rayon",
+ "zeroize",
+]
+
+[[package]]
+name = "ark-ff"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ec847af850f44ad29048935519032c33da8aa03340876d351dfab5660d2966ba"
+dependencies = [
+ "ark-ff-asm",
+ "ark-ff-macros",
+ "ark-serialize",
+ "ark-std",
+ "derivative",
+ "digest 0.10.7",
+ "itertools",
+ "num-bigint",
+ "num-traits",
+ "paste",
+ "rayon",
+ "rustc_version",
+ "zeroize",
+]
+
+[[package]]
+name = "ark-ff-asm"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3ed4aa4fe255d0bc6d79373f7e31d2ea147bcf486cba1be5ba7ea85abdb92348"
+dependencies = [
+ "quote",
+ "syn 1.0.99",
+]
+
+[[package]]
+name = "ark-ff-macros"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7abe79b0e4288889c4574159ab790824d0033b9fdcb2a112a3182fac2e514565"
+dependencies = [
+ "num-bigint",
+ "num-traits",
+ "proc-macro2",
+ "quote",
+ "syn 1.0.99",
+]
+
+[[package]]
+name = "ark-poly"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d320bfc44ee185d899ccbadfa8bc31aab923ce1558716e1997a1e74057fe86bf"
+dependencies = [
+ "ark-ff",
+ "ark-serialize",
+ "ark-std",
+ "derivative",
+ "hashbrown 0.13.2",
+]
+
+[[package]]
+name = "ark-serialize"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "adb7b85a02b83d2f22f89bd5cac66c9c89474240cb6207cb1efc16d098e822a5"
+dependencies = [
+ "ark-serialize-derive",
+ "ark-std",
+ "digest 0.10.7",
+ "num-bigint",
+]
+
+[[package]]
+name = "ark-serialize-derive"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ae3281bc6d0fd7e549af32b52511e1302185bd688fd3359fa36423346ff682ea"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 1.0.99",
+]
+
+[[package]]
+name = "ark-std"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "94893f1e0c6eeab764ade8dc4c0db24caf4fe7cbbaafc0eba0a9030f447b5185"
+dependencies = [
+ "num-traits",
+ "rand 0.8.5",
+ "rayon",
+]
+
 [[package]]
 name = "autocfg"
-version = "1.0.1"
+version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a"
+checksum = "ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26"
 
 [[package]]
 name = "backtrace"
@@ -45,7 +184,7 @@ dependencies = [
  "cfg-if",
  "libc",
  "miniz_oxide",
- "object 0.26.1",
+ "object",
  "rustc-demangle",
 ]
 
@@ -55,24 +194,57 @@ version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "349a06037c7bf932dd7e7d1f653678b2038b9ad46a74102f1fc7bd7872678cce"
 
+[[package]]
+name = "base16ct"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4c7f02d4ea65f2c1853089ffd8d2787bdbc63de2f0d29dedbcf8ccdfa0ccd4cf"
+
 [[package]]
 name = "base64"
 version = "0.13.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"
 
+[[package]]
+name = "base64"
+version = "0.22.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"
+
 [[package]]
 name = "base64ct"
 version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "dea908e7347a8c64e378c17e30ef880ad73e3b4498346b055c2c00ea342f3179"
 
+[[package]]
+name = "bech32"
+version = "0.11.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d965446196e3b7decd44aa7ee49e31d630118f90ef12f97900f262eb915c951d"
+
 [[package]]
 name = "bitflags"
 version = "1.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
 
+[[package]]
+name = "bitflags"
+version = "2.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8f68f53c83ab957f72c32642f3868eec03eb974d1fb82e453128456482613d36"
+
+[[package]]
+name = "blake2"
+version = "0.10.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe"
+dependencies = [
+ "digest 0.10.7",
+]
+
 [[package]]
 name = "block-buffer"
 version = "0.9.0"
@@ -82,6 +254,21 @@ dependencies = [
  "generic-array",
 ]
 
+[[package]]
+name = "block-buffer"
+version = "0.10.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"
+dependencies = [
+ "generic-array",
+]
+
+[[package]]
+name = "bnum"
+version = "0.11.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3e31ea183f6ee62ac8b8a8cf7feddd766317adfb13ff469de57ce033efd6a790"
+
 [[package]]
 name = "bumpalo"
 version = "3.9.1"
@@ -106,7 +293,7 @@ checksum = "edb17c862a905d912174daa27ae002326fff56dc8b8ada50a0a5f0976cb174f0"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.99",
 ]
 
 [[package]]
@@ -115,6 +302,12 @@ version = "1.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"
 
+[[package]]
+name = "bytes"
+version = "1.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f61dac84819c6588b558454b194026eb1f09c293b9036ae9b159e74e73ab6cf9"
+
 [[package]]
 name = "cc"
 version = "1.0.69"
@@ -129,9 +322,9 @@ checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
 
 [[package]]
 name = "clru"
-version = "0.4.0"
+version = "0.6.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "591ff76ca0691bd91c1b0b5b987e5cf93b21ec810ad96665c5a569c60846dd93"
+checksum = "cbd0f76e066e64fdc5631e3bb46381254deab9ef1158292f27c8c57e3bf3fe59"
 
 [[package]]
 name = "const-oid"
@@ -139,16 +332,65 @@ version = "0.7.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e4c78c047431fee22c1a7bb92e00ad095a02a983affe4d8a72e2a2c62c1b94f3"
 
+[[package]]
+name = "const-oid"
+version = "0.9.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c2459377285ad874054d797f3ccebf984978aa39129f6eafde5cdc8315b612f8"
+
+[[package]]
+name = "corosensei"
+version = "0.1.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "80128832c58ea9cbd041d2a759ec449224487b2c1e400453d99d244eead87a8e"
+dependencies = [
+ "autocfg",
+ "cfg-if",
+ "libc",
+ "scopeguard",
+ "windows-sys 0.33.0",
+]
+
+[[package]]
+name = "cosmwasm-core"
+version = "2.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "de32156e4fd80c59be39ed6f4ebb596d59b0a4eaf01d6f146e27628ec7e8f8c1"
+
 [[package]]
 name = "cosmwasm-crypto"
 version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5eb0afef2325df81aadbf9be1233f522ed8f6e91df870c764bc44cca2b1415bd"
 dependencies = [
- "digest",
- "ed25519-zebra",
- "k256",
- "rand_core 0.6.3",
+ "digest 0.9.0",
+ "ed25519-zebra 3.0.0",
+ "k256 0.10.4",
+ "rand_core 0.6.4",
+ "thiserror",
+]
+
+[[package]]
+name = "cosmwasm-crypto"
+version = "2.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "38fe1e6107ae3c9ba5e1f14178dd8bd52210535030d07f0609cf0d754c1f7de2"
+dependencies = [
+ "ark-bls12-381",
+ "ark-ec",
+ "ark-ff",
+ "ark-serialize",
+ "cosmwasm-core",
+ "curve25519-dalek 4.1.3",
+ "digest 0.10.7",
+ "ecdsa 0.16.9",
+ "ed25519-zebra 4.0.3",
+ "k256 0.13.4",
+ "num-traits",
+ "p256",
+ "rand_core 0.6.4",
+ "rayon",
+ "sha2 0.10.8",
  "thiserror",
 ]
 
@@ -158,14 +400,25 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4b36e527620a2a3e00e46b6e731ab6c9b68d11069c986f7d7be8eba79ef081a4"
 dependencies = [
- "syn",
+ "syn 1.0.99",
+]
+
+[[package]]
+name = "cosmwasm-derive"
+version = "2.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "484926c9dc8b90c59a717946c86bb272182003cbaabb378560086648d4056656"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.98",
 ]
 
 [[package]]
 name = "cosmwasm-schema"
-version = "1.2.6"
+version = "2.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "407aca6f1671a08b60db8167f03bb7cb6b2378f0ddd9a030367b66ba33c2fd41"
+checksum = "d2a25988c48703d1450a5ac5e7cd3ad82ec8a7552f3dde8f9b8927e682bd02c7"
 dependencies = [
  "cosmwasm-schema-derive",
  "schemars",
@@ -176,13 +429,13 @@ dependencies = [
 
 [[package]]
 name = "cosmwasm-schema-derive"
-version = "1.2.6"
+version = "2.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e6d1e00b8fd27ff923c10303023626358e23a6f9079f8ebec23a8b4b0bfcd4b3"
+checksum = "bbd08fac60d30e341d9365033f519c0a36fdf38bde6ec196179e653d2723aebd"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.98",
 ]
 
 [[package]]
@@ -191,136 +444,111 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "875994993c2082a6fcd406937bf0fca21c349e4a624f3810253a14fa83a3a195"
 dependencies = [
- "base64",
- "cosmwasm-crypto",
- "cosmwasm-derive",
+ "base64 0.13.0",
+ "cosmwasm-crypto 1.0.0",
+ "cosmwasm-derive 1.0.0",
  "forward_ref",
  "schemars",
  "serde",
- "serde-json-wasm",
+ "serde-json-wasm 0.4.1",
  "thiserror",
  "uint",
 ]
 
+[[package]]
+name = "cosmwasm-std"
+version = "2.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c92be4747d9abe3a96a5a78af34d29947992b3f67f602987ff8a87142ce9c413"
+dependencies = [
+ "base64 0.22.1",
+ "bech32",
+ "bnum",
+ "cosmwasm-core",
+ "cosmwasm-crypto 2.2.1",
+ "cosmwasm-derive 2.2.1",
+ "derive_more",
+ "hex",
+ "rand_core 0.6.4",
+ "rmp-serde",
+ "schemars",
+ "serde",
+ "serde-json-wasm 1.0.1",
+ "sha2 0.10.8",
+ "static_assertions",
+ "thiserror",
+]
+
 [[package]]
 name = "cosmwasm-storage"
 version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d18403b07304d15d304dad11040d45bbcaf78d603b4be3fb5e2685c16f9229b5"
 dependencies = [
- "cosmwasm-std",
+ "cosmwasm-std 1.0.0",
  "serde",
 ]
 
 [[package]]
 name = "cosmwasm-vm"
-version = "1.0.0"
+version = "2.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "472bd6f037bf4de43a29f65ca5d66b8c06510fdb2cd9c911ed08b5a2cec3606f"
+checksum = "62a90cd96797cf4df7bb4fd109cc7de424d0075a696bd48e8537db0e28360828"
 dependencies = [
+ "bech32",
+ "blake2",
+ "bytes",
  "clru",
- "cosmwasm-crypto",
- "cosmwasm-std",
+ "cosmwasm-core",
+ "cosmwasm-crypto 2.2.1",
+ "cosmwasm-std 2.2.1",
+ "cosmwasm-vm-derive",
+ "crc32fast",
+ "derivative",
  "hex",
- "loupe",
- "parity-wasm",
+ "rand_core 0.6.4",
  "schemars",
  "serde",
  "serde_json",
- "sha2",
+ "sha2 0.10.8",
+ "strum",
  "thiserror",
+ "tracing",
  "wasmer",
  "wasmer-middlewares",
+ "wasmer-types",
 ]
 
 [[package]]
-name = "cpufeatures"
-version = "0.2.5"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "28d997bd5e24a5928dd43e46dc529867e207907fe0b239c3477d924f7f2ca320"
-dependencies = [
- "libc",
-]
-
-[[package]]
-name = "cranelift-bforest"
-version = "0.76.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7e6bea67967505247f54fa2c85cf4f6e0e31c4e5692c9b70e4ae58e339067333"
-dependencies = [
- "cranelift-entity",
-]
-
-[[package]]
-name = "cranelift-codegen"
-version = "0.76.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "48194035d2752bdd5bdae429e3ab88676e95f52a2b1355a5d4e809f9e39b1d74"
-dependencies = [
- "cranelift-bforest",
- "cranelift-codegen-meta",
- "cranelift-codegen-shared",
- "cranelift-entity",
- "gimli",
- "log",
- "regalloc",
- "smallvec",
- "target-lexicon",
-]
-
-[[package]]
-name = "cranelift-codegen-meta"
-version = "0.76.0"
+name = "cosmwasm-vm-derive"
+version = "2.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "976efb22fcab4f2cd6bd4e9913764616a54d895c1a23530128d04e03633c555f"
+checksum = "212580561105988baa7b266d9f9bda1fb0cab4558190764bf8a1cb4540154738"
 dependencies = [
- "cranelift-codegen-shared",
- "cranelift-entity",
+ "blake2",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.98",
 ]
 
 [[package]]
-name = "cranelift-codegen-shared"
-version = "0.76.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9dabb5fe66e04d4652e434195b45ae65b5c8172d520247b8f66d8df42b2b45dc"
-
-[[package]]
-name = "cranelift-entity"
-version = "0.76.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3329733e4d4b8e91c809efcaa4faee80bf66f20164e3dd16d707346bd3494799"
-
-[[package]]
-name = "cranelift-frontend"
-version = "0.76.0"
+name = "cpufeatures"
+version = "0.2.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "279afcc0d3e651b773f94837c3d581177b348c8d69e928104b2e9fccb226f921"
+checksum = "59ed5838eebb26a2bb2e58f6d5b5316989ae9d08bab10e0e6d103e656d1b0280"
 dependencies = [
- "cranelift-codegen",
- "log",
- "smallvec",
- "target-lexicon",
+ "libc",
 ]
 
 [[package]]
 name = "crc32fast"
-version = "1.2.1"
+version = "1.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a"
+checksum = "a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3"
 dependencies = [
  "cfg-if",
 ]
 
-[[package]]
-name = "crossbeam-channel"
-version = "0.5.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "06ed27e177f16d65f0f0c22a213e17c696ace5dd64b14258b52f9417ccb52db4"
-dependencies = [
- "cfg-if",
- "crossbeam-utils",
-]
-
 [[package]]
 name = "crossbeam-deque"
 version = "0.8.1"
@@ -341,20 +569,25 @@ dependencies = [
  "cfg-if",
  "crossbeam-utils",
  "lazy_static",
- "memoffset",
+ "memoffset 0.6.4",
  "scopeguard",
 ]
 
 [[package]]
-name = "crossbeam-utils"
-version = "0.8.5"
+name = "crossbeam-queue"
+version = "0.3.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d82cfc11ce7f2c3faef78d8a684447b40d503d9681acebed6cb728d45940c4db"
+checksum = "0f58bbc28f91df819d0aa2a2c00cd19754769c2fad90579b3592b1c9ba7a3115"
 dependencies = [
- "cfg-if",
- "lazy_static",
+ "crossbeam-utils",
 ]
 
+[[package]]
+name = "crossbeam-utils"
+version = "0.8.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"
+
 [[package]]
 name = "crunchy"
 version = "0.2.2"
@@ -368,11 +601,33 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "03c6a1d5fa1de37e071642dfa44ec552ca5b299adb128fab16138e24b548fd21"
 dependencies = [
  "generic-array",
- "rand_core 0.6.3",
+ "rand_core 0.6.4",
+ "subtle",
+ "zeroize",
+]
+
+[[package]]
+name = "crypto-bigint"
+version = "0.5.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0dc92fb57ca44df6db8059111ab3af99a63d5d0f8375d9972e319a379c6bab76"
+dependencies = [
+ "generic-array",
+ "rand_core 0.6.4",
  "subtle",
  "zeroize",
 ]
 
+[[package]]
+name = "crypto-common"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"
+dependencies = [
+ "generic-array",
+ "typenum",
+]
+
 [[package]]
 name = "crypto-mac"
 version = "0.11.1"
@@ -390,30 +645,58 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0b9fdf9972b2bd6af2d913799d9ebc165ea4d2e65878e329d9c6b372c4491b61"
 dependencies = [
  "byteorder",
- "digest",
+ "digest 0.9.0",
  "rand_core 0.5.1",
  "subtle",
  "zeroize",
 ]
 
+[[package]]
+name = "curve25519-dalek"
+version = "4.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be"
+dependencies = [
+ "cfg-if",
+ "cpufeatures",
+ "curve25519-dalek-derive",
+ "digest 0.10.7",
+ "fiat-crypto",
+ "rustc_version",
+ "subtle",
+ "zeroize",
+]
+
+[[package]]
+name = "curve25519-dalek-derive"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.98",
+]
+
 [[package]]
 name = "cw-storage-plus"
-version = "0.13.2"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9336ecef1e19d56cf6e3e932475fc6a3dee35eec5a386e07917a1d1ba6bb0e35"
+checksum = "f13360e9007f51998d42b1bc6b7fa0141f74feae61ed5fd1e5b0a89eec7b5de1"
 dependencies = [
- "cosmwasm-std",
+ "cosmwasm-std 2.2.1",
  "schemars",
  "serde",
 ]
 
 [[package]]
 name = "cw-utils"
-version = "0.13.2"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "babd2c090f39d07ce5bf2556962305e795daa048ce20a93709eb591476e4a29e"
+checksum = "07dfee7f12f802431a856984a32bce1cb7da1e6c006b5409e3981035ce562dec"
 dependencies = [
- "cosmwasm-std",
+ "cosmwasm-schema",
+ "cosmwasm-std 2.2.1",
  "schemars",
  "serde",
  "thiserror",
@@ -421,23 +704,27 @@ dependencies = [
 
 [[package]]
 name = "cw2"
-version = "0.13.2"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "993df11574f29574dd443eb0c189484bb91bc0638b6de3e32ab7f9319c92122d"
+checksum = "b04852cd38f044c0751259d5f78255d07590d136b8a86d4e09efdd7666bd6d27"
 dependencies = [
- "cosmwasm-std",
+ "cosmwasm-schema",
+ "cosmwasm-std 2.2.1",
  "cw-storage-plus",
  "schemars",
+ "semver",
  "serde",
+ "thiserror",
 ]
 
 [[package]]
 name = "cw20"
-version = "0.13.2"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "356d364602c5fe763544ea00d485b825d6ef519a2fc6a3145528d7df3a603f40"
+checksum = "a42212b6bf29bbdda693743697c621894723f35d3db0d5df930be22903d0e27c"
 dependencies = [
- "cosmwasm-std",
+ "cosmwasm-schema",
+ "cosmwasm-std 2.2.1",
  "cw-utils",
  "schemars",
  "serde",
@@ -445,25 +732,26 @@ dependencies = [
 
 [[package]]
 name = "cw20-base"
-version = "0.13.2"
+version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3b370e5fb6b35db58cabd7903b8f9bd4c3bcff701c63bf1a7185a84e60bfa502"
+checksum = "d6de8c32e100f1fca306972d86b617234a5e6b00594ea2b48716fd6804d4d95d"
 dependencies = [
- "cosmwasm-std",
+ "cosmwasm-schema",
+ "cosmwasm-std 2.2.1",
  "cw-storage-plus",
- "cw-utils",
  "cw2",
  "cw20",
  "schemars",
+ "semver",
  "serde",
  "thiserror",
 ]
 
 [[package]]
 name = "darling"
-version = "0.13.0"
+version = "0.20.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "757c0ded2af11d8e739c4daea1ac623dd1624b06c844cf3f5a39f1bdbd99bb12"
+checksum = "6f63b86c8a8826a49b8c21f08a2d07338eec8d900540f8630dc76284be802989"
 dependencies = [
  "darling_core",
  "darling_macro",
@@ -471,36 +759,91 @@ dependencies = [
 
 [[package]]
 name = "darling_core"
-version = "0.13.0"
+version = "0.20.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2c34d8efb62d0c2d7f60ece80f75e5c63c1588ba68032740494b0b9a996466e3"
+checksum = "95133861a8032aaea082871032f5815eb9e98cef03fa916ab4500513994df9e5"
 dependencies = [
  "fnv",
  "ident_case",
  "proc-macro2",
  "quote",
- "strsim",
- "syn",
+ "syn 2.0.98",
 ]
 
 [[package]]
 name = "darling_macro"
-version = "0.13.0"
+version = "0.20.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ade7bff147130fe5e6d39f089c6bd49ec0250f35d70b2eebf72afdfc919f15cc"
+checksum = "d336a2a514f6ccccaa3e09b02d41d35330c07ddf03a62165fcec10bb561c7806"
 dependencies = [
  "darling_core",
  "quote",
- "syn",
+ "syn 2.0.98",
+]
+
+[[package]]
+name = "dashmap"
+version = "6.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5041cc499144891f3790297212f32a74fb938e5136a14943f338ef9e0ae276cf"
+dependencies = [
+ "cfg-if",
+ "crossbeam-utils",
+ "hashbrown 0.14.5",
+ "lock_api",
+ "once_cell",
+ "parking_lot_core",
+]
+
+[[package]]
+name = "der"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6919815d73839e7ad218de758883aae3a257ba6759ce7a9992501efbb53d705c"
+dependencies = [
+ "const-oid 0.7.1",
+]
+
+[[package]]
+name = "der"
+version = "0.7.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f55bf8e7b65898637379c1b74eb1551107c8294ed26d855ceb9fd1a09cfc9bc0"
+dependencies = [
+ "const-oid 0.9.6",
+ "zeroize",
+]
+
+[[package]]
+name = "derivative"
+version = "2.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 1.0.99",
+]
+
+[[package]]
+name = "derive_more"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4a9b99b9cbbe49445b21764dc0625032a89b145a2642e67603e1c936f5458d05"
+dependencies = [
+ "derive_more-impl",
 ]
 
 [[package]]
-name = "der"
-version = "0.5.1"
+name = "derive_more-impl"
+version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6919815d73839e7ad218de758883aae3a257ba6759ce7a9992501efbb53d705c"
+checksum = "cb7330aeadfbe296029522e6c40f315320aba36fc43a5b3632f3795348f3bd22"
 dependencies = [
- "const-oid",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.98",
+ "unicode-xid",
 ]
 
 [[package]]
@@ -512,6 +855,18 @@ dependencies = [
  "generic-array",
 ]
 
+[[package]]
+name = "digest"
+version = "0.10.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"
+dependencies = [
+ "block-buffer 0.10.4",
+ "const-oid 0.9.6",
+ "crypto-common",
+ "subtle",
+]
+
 [[package]]
 name = "doc-comment"
 version = "0.3.3"
@@ -530,13 +885,13 @@ version = "1.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "add9a102807b524ec050363f09e06f1504214b0e1c7797f64261c891022dce8b"
 dependencies = [
- "bitflags",
+ "bitflags 1.3.2",
  "byteorder",
  "lazy_static",
  "proc-macro-error",
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.99",
 ]
 
 [[package]]
@@ -547,7 +902,7 @@ checksum = "64fba5a42bd76a17cad4bfa00de168ee1cbfa06a5e8ce992ae880218c05641a9"
 dependencies = [
  "byteorder",
  "dynasm",
- "memmap2",
+ "memmap2 0.5.3",
 ]
 
 [[package]]
@@ -556,10 +911,32 @@ version = "0.13.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d0d69ae62e0ce582d56380743515fefaf1a8c70cec685d9677636d7e30ae9dc9"
 dependencies = [
- "der",
- "elliptic-curve",
- "rfc6979",
- "signature",
+ "der 0.5.1",
+ "elliptic-curve 0.11.12",
+ "rfc6979 0.1.0",
+ "signature 1.3.1",
+]
+
+[[package]]
+name = "ecdsa"
+version = "0.16.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ee27f32b5c5292967d2d4a9d7f1e0b0aed2c15daded5a60300e4abb9d8020bca"
+dependencies = [
+ "der 0.7.9",
+ "digest 0.10.7",
+ "elliptic-curve 0.13.8",
+ "rfc6979 0.4.0",
+ "signature 2.2.0",
+]
+
+[[package]]
+name = "ed25519"
+version = "2.2.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "115531babc129696a58c64a4fef0a8bf9e9698629fb97e9e40767d235cfbcd53"
+dependencies = [
+ "signature 2.2.0",
 ]
 
 [[package]]
@@ -568,15 +945,30 @@ version = "3.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "403ef3e961ab98f0ba902771d29f842058578bb1ce7e3c59dad5a6a93e784c69"
 dependencies = [
- "curve25519-dalek",
+ "curve25519-dalek 3.2.0",
  "hex",
- "rand_core 0.6.3",
+ "rand_core 0.6.4",
  "serde",
- "sha2",
+ "sha2 0.9.9",
  "thiserror",
  "zeroize",
 ]
 
+[[package]]
+name = "ed25519-zebra"
+version = "4.0.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7d9ce6874da5d4415896cd45ffbc4d1cfc0c4f9c079427bd870742c30f2f65a9"
+dependencies = [
+ "curve25519-dalek 4.1.3",
+ "ed25519",
+ "hashbrown 0.14.5",
+ "hex",
+ "rand_core 0.6.4",
+ "sha2 0.10.8",
+ "zeroize",
+]
+
 [[package]]
 name = "either"
 version = "1.6.1"
@@ -589,14 +981,32 @@ version = "0.11.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "25b477563c2bfed38a3b7a60964c49e058b2510ad3f12ba3483fd8f62c2306d6"
 dependencies = [
- "base16ct",
- "crypto-bigint",
- "der",
- "ff",
+ "base16ct 0.1.1",
+ "crypto-bigint 0.3.2",
+ "der 0.5.1",
+ "ff 0.11.1",
  "generic-array",
- "group",
- "rand_core 0.6.3",
- "sec1",
+ "group 0.11.0",
+ "rand_core 0.6.4",
+ "sec1 0.2.1",
+ "subtle",
+ "zeroize",
+]
+
+[[package]]
+name = "elliptic-curve"
+version = "0.13.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b5e6043086bf7973472e0c7dff2142ea0b680d30e18d9cc40f267efbf222bd47"
+dependencies = [
+ "base16ct 0.2.0",
+ "crypto-bigint 0.5.5",
+ "digest 0.10.7",
+ "ff 0.13.0",
+ "generic-array",
+ "group 0.13.0",
+ "rand_core 0.6.4",
+ "sec1 0.7.3",
  "subtle",
  "zeroize",
 ]
@@ -618,30 +1028,36 @@ checksum = "c134c37760b27a871ba422106eedbb8247da973a09e82558bf26d619c882b159"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.99",
 ]
 
 [[package]]
 name = "enumset"
-version = "1.0.7"
+version = "1.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7e76129da36102af021b8e5000dab2c1c30dbef85c1e482beeff8da5dde0e0b0"
+checksum = "d07a4b049558765cef5f0c1a273c3fc57084d768b44d2f98127aef4cceb17293"
 dependencies = [
  "enumset_derive",
 ]
 
 [[package]]
 name = "enumset_derive"
-version = "0.5.5"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6451128aa6655d880755345d085494cf7561a6bee7c8dc821e5d77e6d267ecd4"
+checksum = "59c3b24c345d8c314966bdc1832f6c2635bfcce8e7cf363bd115987bba2ee242"
 dependencies = [
  "darling",
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.98",
 ]
 
+[[package]]
+name = "equivalent"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"
+
 [[package]]
 name = "fallible-iterator"
 version = "0.2.0"
@@ -654,10 +1070,26 @@ version = "0.11.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "131655483be284720a17d74ff97592b8e76576dc25563148601df2d7c9080924"
 dependencies = [
- "rand_core 0.6.3",
+ "rand_core 0.6.4",
  "subtle",
 ]
 
+[[package]]
+name = "ff"
+version = "0.13.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ded41244b729663b1e574f1b4fb731469f69f79c17667b5d776b16cda0479449"
+dependencies = [
+ "rand_core 0.6.4",
+ "subtle",
+]
+
+[[package]]
+name = "fiat-crypto"
+version = "0.2.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d"
+
 [[package]]
 name = "fnv"
 version = "1.0.7"
@@ -672,12 +1104,13 @@ checksum = "c8cbd1169bd7b4a0a20d92b9af7a7e0422888bd38a6f5ec29c1fd8c1558a272e"
 
 [[package]]
 name = "generic-array"
-version = "0.14.4"
+version = "0.14.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817"
+checksum = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a"
 dependencies = [
  "typenum",
  "version_check",
+ "zeroize",
 ]
 
 [[package]]
@@ -693,13 +1126,15 @@ dependencies = [
 
 [[package]]
 name = "getrandom"
-version = "0.2.3"
+version = "0.2.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753"
+checksum = "c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7"
 dependencies = [
  "cfg-if",
+ "js-sys",
  "libc",
- "wasi 0.10.2+wasi-snapshot-preview1",
+ "wasi 0.11.0+wasi-snapshot-preview1",
+ "wasm-bindgen",
 ]
 
 [[package]]
@@ -707,9 +1142,15 @@ name = "gimli"
 version = "0.25.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f0a01e0497841a3b2db4f8afa483cce65f7e96a3498bd6c541734792aeac8fe7"
+
+[[package]]
+name = "gimli"
+version = "0.26.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "22030e2c5a68ec659fde1e949a745124b48e6fa8b045b7ed5bd1fe4ccc5c4e5d"
 dependencies = [
  "fallible-iterator",
- "indexmap",
+ "indexmap 1.7.0",
  "stable_deref_trait",
 ]
 
@@ -719,8 +1160,19 @@ version = "0.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bc5ac374b108929de78460075f3dc439fa66df9d8fc77e8f12caa5165fcf0c89"
 dependencies = [
- "ff",
- "rand_core 0.6.3",
+ "ff 0.11.1",
+ "rand_core 0.6.4",
+ "subtle",
+]
+
+[[package]]
+name = "group"
+version = "0.13.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f0f9ef7462f7c099f518d754361858f86d8a07af53ba9af0fe635bbccb151a63"
+dependencies = [
+ "ff 0.13.0",
+ "rand_core 0.6.4",
  "subtle",
 ]
 
@@ -729,9 +1181,6 @@ name = "hashbrown"
 version = "0.11.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e"
-dependencies = [
- "ahash",
-]
 
 [[package]]
 name = "hashbrown"
@@ -739,18 +1188,46 @@ version = "0.12.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "db0d4cf898abf0081f964436dc980e96670a0f36863e4b83aaacdb65c9d7ccc3"
 dependencies = [
- "ahash",
+ "ahash 0.7.6",
 ]
 
 [[package]]
-name = "hermit-abi"
-version = "0.1.19"
+name = "hashbrown"
+version = "0.13.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"
+checksum = "43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e"
 dependencies = [
- "libc",
+ "ahash 0.8.11",
+]
+
+[[package]]
+name = "hashbrown"
+version = "0.14.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1"
+dependencies = [
+ "ahash 0.8.11",
+ "allocator-api2",
 ]
 
+[[package]]
+name = "hashbrown"
+version = "0.15.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289"
+
+[[package]]
+name = "heck"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"
+
+[[package]]
+name = "heck"
+version = "0.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea"
+
 [[package]]
 name = "hex"
 version = "0.4.3"
@@ -764,7 +1241,16 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2a2a2320eb7ec0ebe8da8f744d7812d9fc4cb4d09344ac01898dbcb6a20ae69b"
 dependencies = [
  "crypto-mac",
- "digest",
+ "digest 0.9.0",
+]
+
+[[package]]
+name = "hmac"
+version = "0.12.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e"
+dependencies = [
+ "digest 0.10.7",
 ]
 
 [[package]]
@@ -772,7 +1258,7 @@ name = "hub"
 version = "0.0.0"
 dependencies = [
  "cosmwasm-schema",
- "cosmwasm-std",
+ "cosmwasm-std 2.2.1",
  "cosmwasm-storage",
  "cosmwasm-vm",
  "cw-storage-plus",
@@ -799,7 +1285,25 @@ checksum = "bc633605454125dec4b66843673f01c7df2b89479b32e0ed634e43a91cff62a5"
 dependencies = [
  "autocfg",
  "hashbrown 0.11.2",
- "serde",
+]
+
+[[package]]
+name = "indexmap"
+version = "2.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8c9c992b02b5b4c94ea26e32fe5bccb7aa7d9f390ab5c1221ff895bc7ea8b652"
+dependencies = [
+ "equivalent",
+ "hashbrown 0.15.2",
+]
+
+[[package]]
+name = "itertools"
+version = "0.10.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473"
+dependencies = [
+ "either",
 ]
 
 [[package]]
@@ -824,10 +1328,22 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "19c3a5e0a0b8450278feda242592512e09f61c72e018b8cd5c859482802daf2d"
 dependencies = [
  "cfg-if",
- "ecdsa",
- "elliptic-curve",
- "sec1",
- "sha2",
+ "ecdsa 0.13.4",
+ "elliptic-curve 0.11.12",
+ "sec1 0.2.1",
+ "sha2 0.9.9",
+]
+
+[[package]]
+name = "k256"
+version = "0.13.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f6e3919bbaa2945715f0bb6d3934a173d1e9a59ac23767fbaaef277265a7411b"
+dependencies = [
+ "cfg-if",
+ "ecdsa 0.16.9",
+ "elliptic-curve 0.13.8",
+ "sha2 0.10.8",
 ]
 
 [[package]]
@@ -844,26 +1360,16 @@ checksum = "3576a87f2ba00f6f106fdfcd16db1d698d648a26ad8e0573cad8537c3c362d2a"
 
 [[package]]
 name = "libc"
-version = "0.2.100"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a1fa8cddc8fbbee11227ef194b5317ed014b8acbf15139bd716a18ad3fe99ec5"
-
-[[package]]
-name = "libloading"
-version = "0.7.0"
+version = "0.2.169"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6f84d96438c15fcd6c3f244c8fce01d1e2b9c6b5623e9c711dc9286d8fc92d6a"
-dependencies = [
- "cfg-if",
- "winapi",
-]
+checksum = "b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a"
 
 [[package]]
 name = "localmoney-protocol"
 version = "1.0.0"
 dependencies = [
  "cosmwasm-schema",
- "cosmwasm-std",
+ "cosmwasm-std 2.2.1",
  "cosmwasm-storage",
  "cosmwasm-vm",
  "cw-storage-plus",
@@ -875,40 +1381,29 @@ dependencies = [
 ]
 
 [[package]]
-name = "log"
-version = "0.4.14"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710"
-dependencies = [
- "cfg-if",
-]
-
-[[package]]
-name = "loupe"
-version = "0.1.3"
+name = "lock_api"
+version = "0.4.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9b6a72dfa44fe15b5e76b94307eeb2ff995a8c5b283b55008940c02e0c5b634d"
+checksum = "07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17"
 dependencies = [
- "indexmap",
- "loupe-derive",
- "rustversion",
+ "autocfg",
+ "scopeguard",
 ]
 
 [[package]]
-name = "loupe-derive"
-version = "0.1.3"
+name = "log"
+version = "0.4.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0fbfc88337168279f2e9ae06e157cfed4efd3316e14dc96ed074d4f2e6c5952"
+checksum = "51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710"
 dependencies = [
- "quote",
- "syn",
+ "cfg-if",
 ]
 
 [[package]]
-name = "mach"
-version = "0.3.2"
+name = "mach2"
+version = "0.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa"
+checksum = "19b955cdeb2a02b9117f121ce63aa52d08ade45de53e48fe6a38b39c10f6f709"
 dependencies = [
  "libc",
 ]
@@ -928,6 +1423,15 @@ dependencies = [
  "libc",
 ]
 
+[[package]]
+name = "memmap2"
+version = "0.6.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6d28bba84adfe6646737845bc5ebbfa2c08424eb1c37e94a1fd2a82adb56a872"
+dependencies = [
+ "libc",
+]
+
 [[package]]
 name = "memoffset"
 version = "0.6.4"
@@ -937,6 +1441,15 @@ dependencies = [
  "autocfg",
 ]
 
+[[package]]
+name = "memoffset"
+version = "0.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "488016bfae457b036d996092f6cb448677611ce4449e970ceaf42695203f218a"
+dependencies = [
+ "autocfg",
+]
+
 [[package]]
 name = "miniz_oxide"
 version = "0.4.4"
@@ -954,33 +1467,39 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0debeb9fcf88823ea64d64e4a815ab1643f33127d995978e099942ce38f25238"
 
 [[package]]
-name = "num_cpus"
-version = "1.13.0"
+name = "num-bigint"
+version = "0.4.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3"
+checksum = "a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9"
 dependencies = [
- "hermit-abi",
- "libc",
+ "num-integer",
+ "num-traits",
 ]
 
 [[package]]
-name = "object"
-version = "0.26.1"
+name = "num-integer"
+version = "0.1.46"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ee2766204889d09937d00bfbb7fec56bb2a199e2ade963cab19185d8a6104c7c"
+checksum = "7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f"
 dependencies = [
- "memchr",
+ "num-traits",
+]
+
+[[package]]
+name = "num-traits"
+version = "0.2.19"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841"
+dependencies = [
+ "autocfg",
 ]
 
 [[package]]
 name = "object"
-version = "0.28.4"
+version = "0.26.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424"
+checksum = "ee2766204889d09937d00bfbb7fec56bb2a199e2ade963cab19185d8a6104c7c"
 dependencies = [
- "crc32fast",
- "hashbrown 0.11.2",
- "indexmap",
  "memchr",
 ]
 
@@ -989,7 +1508,7 @@ name = "offer"
 version = "0.0.0"
 dependencies = [
  "cosmwasm-schema",
- "cosmwasm-std",
+ "cosmwasm-std 2.2.1",
  "cosmwasm-storage",
  "cosmwasm-vm",
  "cw-storage-plus",
@@ -1006,9 +1525,9 @@ dependencies = [
 
 [[package]]
 name = "once_cell"
-version = "1.12.0"
+version = "1.20.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7709cef83f0c1f58f666e746a08b21e0085f7440fa6a29cc194d68aac97a4225"
+checksum = "945462a4b81e43c4e3ba96bd7b49d834c6f61198356aa858733bc4acf3cbe62e"
 
 [[package]]
 name = "opaque-debug"
@@ -1017,16 +1536,41 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5"
 
 [[package]]
-name = "parity-wasm"
-version = "0.42.2"
+name = "p256"
+version = "0.13.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c9863ad85fa8f4460f9c48cb909d38a0d689dba1f6f6988a5e3e0d31071bcd4b"
+dependencies = [
+ "ecdsa 0.16.9",
+ "elliptic-curve 0.13.8",
+ "primeorder",
+ "sha2 0.10.8",
+]
+
+[[package]]
+name = "parking_lot_core"
+version = "0.9.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "redox_syscall",
+ "smallvec",
+ "windows-targets",
+]
+
+[[package]]
+name = "paste"
+version = "1.0.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "be5e13c266502aadf83426d87d81a0f5d1ef45b8027f5a471c360abfe4bfae92"
+checksum = "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a"
 
 [[package]]
 name = "pin-project-lite"
-version = "0.2.7"
+version = "0.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8d31d11c69a6b52a174b42bdc0c30e5e11670f90788b2c471c31c1d17d449443"
+checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"
 
 [[package]]
 name = "pkcs8"
@@ -1034,7 +1578,7 @@ version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7cabda3fb821068a9a4fab19a683eac3af12edf0f34b94a8be53c4972b8149d0"
 dependencies = [
- "der",
+ "der 0.5.1",
  "spki",
  "zeroize",
 ]
@@ -1050,7 +1594,7 @@ name = "price"
 version = "0.0.6"
 dependencies = [
  "cosmwasm-schema",
- "cosmwasm-std",
+ "cosmwasm-std 2.2.1",
  "cosmwasm-storage",
  "cosmwasm-vm",
  "cw-storage-plus",
@@ -1063,6 +1607,15 @@ dependencies = [
  "thiserror",
 ]
 
+[[package]]
+name = "primeorder"
+version = "0.13.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "353e1ca18966c16d9deb1c69278edbc5f194139612772bd9537af60ac231e1e6"
+dependencies = [
+ "elliptic-curve 0.13.8",
+]
+
 [[package]]
 name = "proc-macro-error"
 version = "1.0.4"
@@ -1072,7 +1625,7 @@ dependencies = [
  "proc-macro-error-attr",
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.99",
  "version_check",
 ]
 
@@ -1089,9 +1642,9 @@ dependencies = [
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.43"
+version = "1.0.93"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0a2ca2c61bc9f3d74d2886294ab7b9853abd9c1ad903a3ac7815c58989bb7bab"
+checksum = "60946a68e5f9d28b0dc1c21bb8a97ee7d018a8b322fa57838ba31cc878e22d99"
 dependencies = [
  "unicode-ident",
 ]
@@ -1101,7 +1654,7 @@ name = "profile"
 version = "0.0.0"
 dependencies = [
  "cosmwasm-schema",
- "cosmwasm-std",
+ "cosmwasm-std 2.2.1",
  "cosmwasm-storage",
  "cosmwasm-vm",
  "cw-storage-plus",
@@ -1131,14 +1684,14 @@ checksum = "16b845dbfca988fa33db069c0e230574d15a3088f147a87b64c7589eb662c9ac"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.99",
 ]
 
 [[package]]
 name = "quote"
-version = "1.0.9"
+version = "1.0.38"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7"
+checksum = "0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc"
 dependencies = [
  "proc-macro2",
 ]
@@ -1162,9 +1715,8 @@ version = "0.8.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"
 dependencies = [
- "libc",
  "rand_chacha 0.3.1",
- "rand_core 0.6.3",
+ "rand_core 0.6.4",
 ]
 
 [[package]]
@@ -1184,7 +1736,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"
 dependencies = [
  "ppv-lite86",
- "rand_core 0.6.3",
+ "rand_core 0.6.4",
 ]
 
 [[package]]
@@ -1198,11 +1750,11 @@ dependencies = [
 
 [[package]]
 name = "rand_core"
-version = "0.6.3"
+version = "0.6.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7"
+checksum = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"
 dependencies = [
- "getrandom 0.2.3",
+ "getrandom 0.2.15",
 ]
 
 [[package]]
@@ -1216,75 +1768,50 @@ dependencies = [
 
 [[package]]
 name = "rayon"
-version = "1.5.1"
+version = "1.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c06aca804d41dbc8ba42dfd964f0d01334eceb64314b9ecf7c5fad5188a06d90"
+checksum = "b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa"
 dependencies = [
- "autocfg",
- "crossbeam-deque",
  "either",
  "rayon-core",
 ]
 
 [[package]]
 name = "rayon-core"
-version = "1.9.1"
+version = "1.12.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d78120e2c850279833f1dd3582f730c4ab53ed95aeaaaa862a2a5c71b1656d8e"
+checksum = "1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2"
 dependencies = [
- "crossbeam-channel",
  "crossbeam-deque",
  "crossbeam-utils",
- "lazy_static",
- "num_cpus",
 ]
 
 [[package]]
 name = "redox_syscall"
-version = "0.2.10"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff"
-dependencies = [
- "bitflags",
-]
-
-[[package]]
-name = "regalloc"
-version = "0.0.31"
+version = "0.5.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "571f7f397d61c4755285cd37853fe8e03271c243424a907415909379659381c5"
+checksum = "03a862b389f93e68874fbf580b9de08dd02facb9a788ebadaf4a3fd33cf58834"
 dependencies = [
- "log",
- "rustc-hash",
- "smallvec",
+ "bitflags 2.8.0",
 ]
 
 [[package]]
 name = "region"
-version = "3.0.0"
+version = "3.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "76e189c2369884dce920945e2ddf79b3dff49e071a167dd1817fa9c4c00d512e"
+checksum = "e6b6ebd13bc009aef9cd476c1310d49ac354d36e240cf1bd753290f3dc7199a7"
 dependencies = [
- "bitflags",
+ "bitflags 1.3.2",
  "libc",
- "mach",
- "winapi",
-]
-
-[[package]]
-name = "remove_dir_all"
-version = "0.5.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7"
-dependencies = [
- "winapi",
+ "mach2",
+ "windows-sys 0.52.0",
 ]
 
 [[package]]
 name = "rend"
-version = "0.3.6"
+version = "0.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "79af64b4b6362ffba04eef3a4e10829718a4896dac19daa741851c86781edf95"
+checksum = "71fe3824f5629716b1589be05dacd749f6aa084c87e00e016714a8cdfccc997c"
 dependencies = [
  "bytecheck",
 ]
@@ -1295,19 +1822,30 @@ version = "0.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "96ef608575f6392792f9ecf7890c00086591d29a83910939d430753f7c050525"
 dependencies = [
- "crypto-bigint",
- "hmac",
+ "crypto-bigint 0.3.2",
+ "hmac 0.11.0",
  "zeroize",
 ]
 
+[[package]]
+name = "rfc6979"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f8dd2a808d456c4a54e300a23e9f5a67e122c3024119acbfd73e3bf664491cb2"
+dependencies = [
+ "hmac 0.12.1",
+ "subtle",
+]
+
 [[package]]
 name = "rkyv"
-version = "0.7.38"
+version = "0.7.40"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "517a3034eb2b1499714e9d1e49b2367ad567e07639b69776d35e259d9c27cca6"
+checksum = "c30f1d45d9aa61cbc8cd1eb87705470892289bb2d01943e7803b873a57404dc3"
 dependencies = [
  "bytecheck",
  "hashbrown 0.12.1",
+ "indexmap 1.7.0",
  "ptr_meta",
  "rend",
  "rkyv_derive",
@@ -1316,13 +1854,35 @@ dependencies = [
 
 [[package]]
 name = "rkyv_derive"
-version = "0.7.38"
+version = "0.7.40"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "505c209ee04111a006431abf39696e640838364d67a107c559ababaf6fd8c9dd"
+checksum = "ff26ed6c7c4dfc2aa9480b86a60e3c7233543a270a680e10758a507c5a4ce476"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.99",
+]
+
+[[package]]
+name = "rmp"
+version = "0.8.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "228ed7c16fa39782c3b3468e974aec2795e9089153cd08ee2e9aefb3613334c4"
+dependencies = [
+ "byteorder",
+ "num-traits",
+ "paste",
+]
+
+[[package]]
+name = "rmp-serde"
+version = "1.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "52e599a477cf9840e92f2cde9a7189e67b42c57532749bf90aea6ec10facd4db"
+dependencies = [
+ "byteorder",
+ "rmp",
+ "serde",
 ]
 
 [[package]]
@@ -1332,10 +1892,13 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342"
 
 [[package]]
-name = "rustc-hash"
-version = "1.1.0"
+name = "rustc_version"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"
+checksum = "cfcb3a22ef46e85b45de6ee7e79d063319ebb6594faafcf1c225ea92ab6e9b92"
+dependencies = [
+ "semver",
+]
 
 [[package]]
 name = "rustversion"
@@ -1351,9 +1914,9 @@ checksum = "71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e"
 
 [[package]]
 name = "schemars"
-version = "0.8.10"
+version = "0.8.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1847b767a3d62d95cbf3d8a9f0e421cf57a0d8aa4f411d4b16525afb0284d4ed"
+checksum = "09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92"
 dependencies = [
  "dyn-clone",
  "schemars_derive",
@@ -1363,14 +1926,14 @@ dependencies = [
 
 [[package]]
 name = "schemars_derive"
-version = "0.8.10"
+version = "0.8.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "af4d7e1b012cb3d9129567661a63755ea4b8a7386d339dc945ae187e403c6743"
+checksum = "b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e"
 dependencies = [
  "proc-macro2",
  "quote",
  "serde_derive_internals",
- "syn",
+ "syn 2.0.98",
 ]
 
 [[package]]
@@ -1387,22 +1950,47 @@ checksum = "1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b"
 
 [[package]]
 name = "sec1"
-version = "0.2.1"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "08da66b8b0965a5555b6bd6639e68ccba85e1e2506f5fbb089e93f8a04e1a2d1"
+dependencies = [
+ "der 0.5.1",
+ "generic-array",
+ "pkcs8",
+ "subtle",
+ "zeroize",
+]
+
+[[package]]
+name = "sec1"
+version = "0.7.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "08da66b8b0965a5555b6bd6639e68ccba85e1e2506f5fbb089e93f8a04e1a2d1"
+checksum = "d3e97a565f76233a6003f9f5c54be1d9c5bdfa3eccfb189469f11ec4901c47dc"
 dependencies = [
- "der",
+ "base16ct 0.2.0",
+ "der 0.7.9",
  "generic-array",
- "pkcs8",
  "subtle",
  "zeroize",
 ]
 
+[[package]]
+name = "self_cell"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c2fdfc24bc566f839a2da4c4295b82db7d25a24253867d5c64355abb5799bdbe"
+
+[[package]]
+name = "semver"
+version = "1.0.25"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f79dfe2d285b0488816f30e700a7438c5a73d816b5b7d3ac72fbc48b0d185e03"
+
 [[package]]
 name = "serde"
-version = "1.0.144"
+version = "1.0.217"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0f747710de3dcd43b88c9168773254e809d8ddbdf9653b84e2554ab219f17860"
+checksum = "02fc4265df13d6fa1d00ecff087228cc0a2b5f3c0e87e258d8b94a156e984c70"
 dependencies = [
  "serde_derive",
 ]
@@ -1417,34 +2005,45 @@ dependencies = [
 ]
 
 [[package]]
-name = "serde_bytes"
-version = "0.11.5"
+name = "serde-json-wasm"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f05da0d153dd4595bdffd5099dc0e9ce425b205ee648eb93437ff7302af8c9a5"
+dependencies = [
+ "serde",
+]
+
+[[package]]
+name = "serde-wasm-bindgen"
+version = "0.4.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "16ae07dd2f88a366f15bd0632ba725227018c69a1c8550a927324f8eb8368bb9"
+checksum = "e3b4c031cd0d9014307d82b8abf653c0290fbdaeb4c02d00c63cf52f728628bf"
 dependencies = [
+ "js-sys",
  "serde",
+ "wasm-bindgen",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.144"
+version = "1.0.217"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "94ed3a816fb1d101812f83e789f888322c34e291f894f19590dc310963e87a00"
+checksum = "5a9bf7cf98d04a2b28aead066b7496853d4779c9cc183c440dbac457641e19a0"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.98",
 ]
 
 [[package]]
 name = "serde_derive_internals"
-version = "0.26.0"
+version = "0.29.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "85bf8229e7920a9f636479437026331ce11aa132b4dde37d121944a44d6e5f3c"
+checksum = "18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.98",
 ]
 
 [[package]]
@@ -1464,21 +2063,52 @@ version = "0.9.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800"
 dependencies = [
- "block-buffer",
+ "block-buffer 0.9.0",
  "cfg-if",
  "cpufeatures",
- "digest",
+ "digest 0.9.0",
  "opaque-debug",
 ]
 
+[[package]]
+name = "sha2"
+version = "0.10.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8"
+dependencies = [
+ "cfg-if",
+ "cpufeatures",
+ "digest 0.10.7",
+]
+
+[[package]]
+name = "shared-buffer"
+version = "0.1.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f6c99835bad52957e7aa241d3975ed17c1e5f8c92026377d117a606f36b84b16"
+dependencies = [
+ "bytes",
+ "memmap2 0.6.2",
+]
+
 [[package]]
 name = "signature"
 version = "1.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c19772be3c4dd2ceaacf03cb41d5885f2a02c4d8804884918e3a258480803335"
 dependencies = [
- "digest",
- "rand_core 0.6.3",
+ "digest 0.9.0",
+ "rand_core 0.6.4",
+]
+
+[[package]]
+name = "signature"
+version = "2.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "77549399552de45a898a580c1b41d445bf730df867cc44e6c0233bbc4b8329de"
+dependencies = [
+ "digest 0.10.7",
+ "rand_core 0.6.4",
 ]
 
 [[package]]
@@ -1489,9 +2119,9 @@ checksum = "fe0f37c9e8f3c5a4a66ad655a93c74daac4ad00c441533bf5c6e7990bb42604e"
 
 [[package]]
 name = "snafu"
-version = "0.6.10"
+version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "eab12d3c261b2308b0d80c26fffb58d17eba81a4be97890101f416b478c79ca7"
+checksum = "e4de37ad025c587a29e8f3f5605c00f70b98715ef90b9061a815b9e59e9042d6"
 dependencies = [
  "doc-comment",
  "snafu-derive",
@@ -1499,13 +2129,14 @@ dependencies = [
 
 [[package]]
 name = "snafu-derive"
-version = "0.6.10"
+version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1508efa03c362e23817f96cde18abed596a25219a8b2c66e8db33c03543d315b"
+checksum = "990079665f075b699031e9c08fd3ab99be5029b96f3b78dc0709e8f77e4efebf"
 dependencies = [
+ "heck 0.4.1",
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.99",
 ]
 
 [[package]]
@@ -1515,7 +2146,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "44d01ac02a6ccf3e07db148d2be087da624fea0221a16152ed01f0496a6b0a27"
 dependencies = [
  "base64ct",
- "der",
+ "der 0.5.1",
 ]
 
 [[package]]
@@ -1531,10 +2162,26 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"
 
 [[package]]
-name = "strsim"
-version = "0.10.0"
+name = "strum"
+version = "0.26.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06"
+dependencies = [
+ "strum_macros",
+]
+
+[[package]]
+name = "strum_macros"
+version = "0.26.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"
+checksum = "4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be"
+dependencies = [
+ "heck 0.5.0",
+ "proc-macro2",
+ "quote",
+ "rustversion",
+ "syn 2.0.98",
+]
 
 [[package]]
 name = "subtle"
@@ -1554,53 +2201,48 @@ dependencies = [
 ]
 
 [[package]]
-name = "target-lexicon"
-version = "0.12.2"
+name = "syn"
+version = "2.0.98"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d9bffcddbc2458fa3e6058414599e3c838a022abae82e5c67b4f7f80298d5bff"
+checksum = "36147f1a48ae0ec2b5b3bc5b537d267457555a10dc06f3dbc8cb11ba3006d3b1"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
 
 [[package]]
-name = "tempfile"
-version = "3.2.0"
+name = "target-lexicon"
+version = "0.12.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22"
-dependencies = [
- "cfg-if",
- "libc",
- "rand 0.8.5",
- "redox_syscall",
- "remove_dir_all",
- "winapi",
-]
+checksum = "d9bffcddbc2458fa3e6058414599e3c838a022abae82e5c67b4f7f80298d5bff"
 
 [[package]]
 name = "thiserror"
-version = "1.0.34"
+version = "1.0.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8c1b05ca9d106ba7d2e31a9dab4a64e7be2cce415321966ea3132c49a656e252"
+checksum = "b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52"
 dependencies = [
  "thiserror-impl",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "1.0.34"
+version = "1.0.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e8f2591983642de85c921015f3f070c665a197ed69e417af436115e3a1407487"
+checksum = "4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.98",
 ]
 
 [[package]]
 name = "tracing"
-version = "0.1.26"
+version = "0.1.41"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "09adeb8c97449311ccd28a427f96fb563e7fd31aabf994189879d9da2394b89d"
+checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
 dependencies = [
- "cfg-if",
- "log",
  "pin-project-lite",
  "tracing-attributes",
  "tracing-core",
@@ -1608,22 +2250,22 @@ dependencies = [
 
 [[package]]
 name = "tracing-attributes"
-version = "0.1.15"
+version = "0.1.28"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c42e6fa53307c8a17e4ccd4dc81cf5ec38db9209f59b222210375b54ee40d1e2"
+checksum = "395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.98",
 ]
 
 [[package]]
 name = "tracing-core"
-version = "0.1.19"
+version = "0.1.33"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2ca517f43f0fb96e0c3072ed5c275fe5eece87e8cb52f4a77b69226d3b1c9df8"
+checksum = "e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c"
 dependencies = [
- "lazy_static",
+ "once_cell",
 ]
 
 [[package]]
@@ -1631,7 +2273,7 @@ name = "trade"
 version = "0.0.0"
 dependencies = [
  "cosmwasm-schema",
- "cosmwasm-std",
+ "cosmwasm-std 2.2.1",
  "cosmwasm-storage",
  "cosmwasm-vm",
  "cw-storage-plus",
@@ -1647,9 +2289,9 @@ dependencies = [
 
 [[package]]
 name = "typenum"
-version = "1.13.0"
+version = "1.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "879f6906492a7cd215bfa4cf595b600146ccfac0c79bcbd1f3000162af5e8b06"
+checksum = "42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825"
 
 [[package]]
 name = "uint"
@@ -1665,15 +2307,21 @@ dependencies = [
 
 [[package]]
 name = "unicode-ident"
-version = "1.0.3"
+version = "1.0.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a210d160f08b701c8721ba1c726c11662f877ea6b7094007e1ca9a1041945034"
+
+[[package]]
+name = "unicode-xid"
+version = "0.2.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c4f5b37a154999a8f3f98cc23a628d850e154479cd94decf3414696e12e31aaf"
+checksum = "ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853"
 
 [[package]]
 name = "version_check"
-version = "0.9.3"
+version = "0.9.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe"
+checksum = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a"
 
 [[package]]
 name = "wasi"
@@ -1683,40 +2331,41 @@ checksum = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519"
 
 [[package]]
 name = "wasi"
-version = "0.10.2+wasi-snapshot-preview1"
+version = "0.11.0+wasi-snapshot-preview1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6"
+checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
 
 [[package]]
 name = "wasm-bindgen"
-version = "0.2.80"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "27370197c907c55e3f1a9fbe26f44e937fe6451368324e009cba39e139dc08ad"
+checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
 dependencies = [
  "cfg-if",
+ "once_cell",
+ "rustversion",
  "wasm-bindgen-macro",
 ]
 
 [[package]]
 name = "wasm-bindgen-backend"
-version = "0.2.80"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "53e04185bfa3a779273da532f5025e33398409573f348985af9a1cbf3774d3f4"
+checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
 dependencies = [
  "bumpalo",
- "lazy_static",
  "log",
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.98",
  "wasm-bindgen-shared",
 ]
 
 [[package]]
 name = "wasm-bindgen-macro"
-version = "0.2.80"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "17cae7ff784d7e83a2fe7611cfe766ecf034111b49deb850a3dc7699c08251f5"
+checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
 dependencies = [
  "quote",
  "wasm-bindgen-macro-support",
@@ -1724,288 +2373,351 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro-support"
-version = "0.2.80"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "99ec0dc7a4756fffc231aab1b9f2f578d23cd391390ab27f952ae0c9b3ece20b"
+checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.98",
  "wasm-bindgen-backend",
  "wasm-bindgen-shared",
 ]
 
 [[package]]
 name = "wasm-bindgen-shared"
-version = "0.2.80"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d554b7f530dee5964d9a9468d95c1f8b8acae4f282807e7d27d4b03099a46744"
+checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
+dependencies = [
+ "unicode-ident",
+]
 
 [[package]]
 name = "wasmer"
-version = "2.2.1"
+version = "4.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f727a39e7161f7438ddb8eafe571b67c576a8c2fb459f666d9053b5bba4afdea"
+checksum = "4b28d4251f96ece14460328c56ee0525edcf4bbb08748cfd87fef3580ae4d403"
 dependencies = [
+ "bytes",
  "cfg-if",
- "indexmap",
+ "derivative",
+ "indexmap 1.7.0",
  "js-sys",
- "loupe",
  "more-asserts",
+ "rustc-demangle",
+ "serde",
+ "serde-wasm-bindgen",
+ "shared-buffer",
  "target-lexicon",
  "thiserror",
+ "tracing",
  "wasm-bindgen",
  "wasmer-compiler",
- "wasmer-compiler-cranelift",
  "wasmer-compiler-singlepass",
  "wasmer-derive",
- "wasmer-engine",
- "wasmer-engine-dylib",
- "wasmer-engine-universal",
  "wasmer-types",
  "wasmer-vm",
- "winapi",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "wasmer-compiler"
-version = "2.2.1"
+version = "4.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4e9951599222eb12bd13d4d91bcded0a880e4c22c2dfdabdf5dc7e5e803b7bf3"
+checksum = "009b8417d51dbca8ac9a640ea999cc924fc59040a81245ecd0e092cb7c45dc10"
 dependencies = [
+ "backtrace",
+ "bytes",
+ "cfg-if",
+ "enum-iterator",
  "enumset",
- "loupe",
+ "lazy_static",
+ "leb128",
+ "libc",
+ "memmap2 0.5.3",
+ "more-asserts",
+ "region",
  "rkyv",
- "serde",
- "serde_bytes",
+ "self_cell",
+ "shared-buffer",
  "smallvec",
- "target-lexicon",
  "thiserror",
  "wasmer-types",
  "wasmer-vm",
  "wasmparser",
-]
-
-[[package]]
-name = "wasmer-compiler-cranelift"
-version = "2.2.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "44c83273bce44e668f3a2b9ccb7f1193db918b1d6806f64acc5ff71f6ece5f20"
-dependencies = [
- "cranelift-codegen",
- "cranelift-entity",
- "cranelift-frontend",
- "gimli",
- "loupe",
- "more-asserts",
- "rayon",
- "smallvec",
- "target-lexicon",
- "tracing",
- "wasmer-compiler",
- "wasmer-types",
- "wasmer-vm",
+ "windows-sys 0.59.0",
+ "xxhash-rust",
 ]
 
 [[package]]
 name = "wasmer-compiler-singlepass"
-version = "2.2.1"
+version = "4.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5432e993840cdb8e6875ddc8c9eea64e7a129579b4706bd91b8eb474d9c4a860"
+checksum = "c6add6b3abdbd2db38dd6a42e4727d860b893e5a6ba3ac49bdd42fe0e6dc06db"
 dependencies = [
  "byteorder",
  "dynasm",
  "dynasmrt",
+ "enumset",
+ "gimli 0.26.2",
  "lazy_static",
- "loupe",
  "more-asserts",
  "rayon",
  "smallvec",
  "wasmer-compiler",
  "wasmer-types",
- "wasmer-vm",
 ]
 
 [[package]]
 name = "wasmer-derive"
-version = "2.2.1"
+version = "4.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "458dbd9718a837e6dbc52003aef84487d79eedef5fa28c7d28b6784be98ac08e"
+checksum = "02592d86ac19fb09c972e72edeb3e57ac5c569eac7e77b919b165da014e8c139"
 dependencies = [
  "proc-macro-error",
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.99",
 ]
 
 [[package]]
-name = "wasmer-engine"
-version = "2.2.1"
+name = "wasmer-middlewares"
+version = "4.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6ed603a6d037ebbb14014d7f739ae996a78455a4b86c41cfa4e81c590a1253b9"
+checksum = "9b8606706b694465035cbdd85a5a1ea437b7cd851e6a8dfe4e387a3e8f81ef78"
 dependencies = [
- "backtrace",
- "enumset",
- "lazy_static",
- "loupe",
- "memmap2",
- "more-asserts",
- "rustc-demangle",
- "serde",
- "serde_bytes",
- "target-lexicon",
- "thiserror",
- "wasmer-compiler",
+ "wasmer",
  "wasmer-types",
  "wasmer-vm",
 ]
 
 [[package]]
-name = "wasmer-engine-dylib"
-version = "2.2.1"
+name = "wasmer-types"
+version = "4.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ccd7fdc60e252a795c849b3f78a81a134783051407e7e279c10b7019139ef8dc"
+checksum = "3d22a00f1a90e9e66d5427853f41e76d8ab89e03eb3034debd11933607fef56a"
 dependencies = [
- "cfg-if",
+ "bytecheck",
  "enum-iterator",
  "enumset",
- "leb128",
- "libloading",
- "loupe",
- "object 0.28.4",
+ "getrandom 0.2.15",
+ "hex",
+ "indexmap 1.7.0",
+ "more-asserts",
  "rkyv",
- "serde",
- "tempfile",
- "tracing",
- "wasmer-compiler",
- "wasmer-engine",
- "wasmer-object",
- "wasmer-types",
- "wasmer-vm",
- "which",
+ "sha2 0.10.8",
+ "target-lexicon",
+ "thiserror",
+ "xxhash-rust",
 ]
 
 [[package]]
-name = "wasmer-engine-universal"
-version = "2.2.1"
+name = "wasmer-vm"
+version = "4.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "dcff0cd2c01a8de6009fd863b14ea883132a468a24f2d2ee59dc34453d3a31b5"
+checksum = "87d88e8355157cd730fb81e33c3b4d6849fd44c26d32bf78820638e1d935967b"
 dependencies = [
+ "backtrace",
+ "cc",
  "cfg-if",
+ "corosensei",
+ "crossbeam-queue",
+ "dashmap",
+ "derivative",
  "enum-iterator",
- "enumset",
- "leb128",
- "loupe",
+ "fnv",
+ "indexmap 1.7.0",
+ "lazy_static",
+ "libc",
+ "mach2",
+ "memoffset 0.9.1",
+ "more-asserts",
  "region",
- "rkyv",
- "wasmer-compiler",
- "wasmer-engine",
+ "scopeguard",
+ "thiserror",
  "wasmer-types",
- "wasmer-vm",
- "winapi",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
-name = "wasmer-middlewares"
-version = "2.2.1"
+name = "wasmparser"
+version = "0.121.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "659775db15684f4674c3a8967409682c2eb44f63cc21121fa3dcd975c03ab887"
+checksum = "9dbe55c8f9d0dbd25d9447a5a889ff90c0cc3feaa7395310d3d826b2c703eaab"
 dependencies = [
- "loupe",
- "wasmer",
- "wasmer-types",
- "wasmer-vm",
+ "bitflags 2.8.0",
+ "indexmap 2.7.1",
+ "semver",
 ]
 
 [[package]]
-name = "wasmer-object"
-version = "2.2.1"
+name = "windows-sys"
+version = "0.33.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "24ce18ac2877050e59580d27ee1a88f3192d7a31e77fbba0852abc7888d6e0b5"
+checksum = "43dbb096663629518eb1dfa72d80243ca5a6aca764cae62a2df70af760a9be75"
 dependencies = [
- "object 0.28.4",
- "thiserror",
- "wasmer-compiler",
- "wasmer-types",
+ "windows_aarch64_msvc 0.33.0",
+ "windows_i686_gnu 0.33.0",
+ "windows_i686_msvc 0.33.0",
+ "windows_x86_64_gnu 0.33.0",
+ "windows_x86_64_msvc 0.33.0",
 ]
 
 [[package]]
-name = "wasmer-types"
-version = "2.2.1"
+name = "windows-sys"
+version = "0.52.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "659fa3dd6c76f62630deff4ac8c7657b07f0b1e4d7e0f8243a552b9d9b448e24"
+checksum = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"
 dependencies = [
- "indexmap",
- "loupe",
- "rkyv",
- "serde",
- "thiserror",
+ "windows-targets",
 ]
 
 [[package]]
-name = "wasmer-vm"
-version = "2.2.1"
+name = "windows-sys"
+version = "0.59.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "afdc46158517c2769f9938bc222a7d41b3bb330824196279d8aa2d667cd40641"
+checksum = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b"
 dependencies = [
- "backtrace",
- "cc",
- "cfg-if",
- "enum-iterator",
- "indexmap",
- "libc",
- "loupe",
- "memoffset",
- "more-asserts",
- "region",
- "rkyv",
- "serde",
- "thiserror",
- "wasmer-types",
- "winapi",
+ "windows-targets",
 ]
 
 [[package]]
-name = "wasmparser"
-version = "0.78.2"
+name = "windows-targets"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "52144d4c78e5cf8b055ceab8e5fa22814ce4315d6002ad32cfd914f37c12fd65"
+checksum = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973"
+dependencies = [
+ "windows_aarch64_gnullvm",
+ "windows_aarch64_msvc 0.52.6",
+ "windows_i686_gnu 0.52.6",
+ "windows_i686_gnullvm",
+ "windows_i686_msvc 0.52.6",
+ "windows_x86_64_gnu 0.52.6",
+ "windows_x86_64_gnullvm",
+ "windows_x86_64_msvc 0.52.6",
+]
 
 [[package]]
-name = "which"
-version = "4.2.2"
+name = "windows_aarch64_gnullvm"
+version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ea187a8ef279bc014ec368c27a920da2024d2a711109bfbe3440585d5cf27ad9"
-dependencies = [
- "either",
- "lazy_static",
- "libc",
-]
+checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.33.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd761fd3eb9ab8cc1ed81e56e567f02dd82c4c837e48ac3b2181b9ffc5060807"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.33.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cab0cf703a96bab2dc0c02c0fa748491294bf9b7feb27e1f4f96340f208ada0e"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"
+
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.33.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8cfdbe89cc9ad7ce618ba34abc34bbb6c36d99e96cae2245b7943cd75ee773d0"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"
 
 [[package]]
-name = "winapi"
-version = "0.3.9"
+name = "windows_x86_64_gnu"
+version = "0.33.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
+checksum = "b4dd9b0c0e9ece7bb22e84d70d01b71c6d6248b81a3c60d11869451b4cb24784"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.33.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ff1e4aa646495048ec7f3ffddc411e1d829c026a2ec62b39da15c1055e406eaa"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.52.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
+
+[[package]]
+name = "xxhash-rust"
+version = "0.8.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fdd20c5420375476fbd4394763288da7eb0cc0b8c11deed431a91562af7335d3"
+
+[[package]]
+name = "zerocopy"
+version = "0.7.35"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0"
 dependencies = [
- "winapi-i686-pc-windows-gnu",
- "winapi-x86_64-pc-windows-gnu",
+ "zerocopy-derive",
 ]
 
 [[package]]
-name = "winapi-i686-pc-windows-gnu"
-version = "0.4.0"
+name = "zerocopy-derive"
+version = "0.7.35"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
+checksum = "fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.98",
+]
 
 [[package]]
-name = "winapi-x86_64-pc-windows-gnu"
-version = "0.4.0"
+name = "zeroize"
+version = "1.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+checksum = "ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde"
+dependencies = [
+ "zeroize_derive",
+]
 
 [[package]]
-name = "zeroize"
-version = "1.4.1"
+name = "zeroize_derive"
+version = "1.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "377db0846015f7ae377174787dd452e1c5f5a9050bc6f954911d01f116daa0cd"
+checksum = "ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.98",
+]
diff --git a/contracts/cosmwasm/Cargo.toml b/contracts/cosmwasm/Cargo.toml
index f72cfc1..7821ec6 100644
--- a/contracts/cosmwasm/Cargo.toml
+++ b/contracts/cosmwasm/Cargo.toml
@@ -1,5 +1,6 @@
 [workspace]
 members = ["contracts/*", "packages/*"]
+resolver = "2"
 
 [profile.release]
 rpath = false
diff --git a/contracts/cosmwasm/contracts/hub/Cargo.toml b/contracts/cosmwasm/contracts/hub/Cargo.toml
index 9da5d19..6716250 100644
--- a/contracts/cosmwasm/contracts/hub/Cargo.toml
+++ b/contracts/cosmwasm/contracts/hub/Cargo.toml
@@ -17,22 +17,22 @@ crate-type = ["cdylib", "rlib"]
 
 [features]
 # for more explicit tests, cargo test --features=backtraces
-backtraces = ["cosmwasm-std/backtraces"]
+backtraces = []
 # use library feature to disable all instantiate/execute/query exports
 library = []
 
 [dependencies]
-cosmwasm-std = { version = "1.0.0" }
+cosmwasm-std = "2.2.1"
 cosmwasm-storage = { version = "1.0.0" }
-thiserror = "1.0.25"
-schemars = "0.8.10"
-serde = { version = "1.0.103", default-features = false, features = ["derive"] }
-snafu = { version = "0.6.3" }
-cw2 = { version = "0.13.1" }
-cw20 = { version = "0.13.1" }
+thiserror = "1.0.45"
+schemars = "0.8.12"
+serde = { version = "1.0.188", default-features = false, features = ["derive"] }
+snafu = "0.7.4"
+cw2 = "2.0.0"
+cw20 = "2.0.0"
 localmoney-protocol = { path = "../../packages/protocol" }
-cw-storage-plus = { version = "0.13.1", features = ["iterator"] }
+cw-storage-plus = { version = "2.0.0" }
 
 [dev-dependencies]
-cosmwasm-schema = { version = "1.0.0" }
-cosmwasm-vm = { version = "1.0.0" }
+cosmwasm-schema = "2.2.0"
+cosmwasm-vm = "2.2.1"
diff --git a/contracts/cosmwasm/contracts/hub/src/contract.rs b/contracts/cosmwasm/contracts/hub/src/contract.rs
index b231fba..bbfe1ba 100644
--- a/contracts/cosmwasm/contracts/hub/src/contract.rs
+++ b/contracts/cosmwasm/contracts/hub/src/contract.rs
@@ -1,5 +1,7 @@
 use cosmwasm_std::{entry_point, Addr, Binary, Decimal, Deps, StdResult, Storage, Uint64};
-use cosmwasm_std::{to_binary, CosmosMsg, DepsMut, Env, MessageInfo, Response, SubMsg, WasmMsg};
+use cosmwasm_std::{
+    to_json_binary, CosmosMsg, DepsMut, Env, MessageInfo, Response, SubMsg, WasmMsg,
+};
 use cw2::{get_contract_version, set_contract_version};
 use localmoney_protocol::constants::{
     MAX_PLATFORM_FEE, MAX_TRADE_DISPUTE_TIMER, MAX_TRADE_EXPIRATION_TIMER,
@@ -70,25 +72,25 @@ fn update_config(
 
     let offer_register_hub = SubMsg::new(CosmosMsg::Wasm(WasmMsg::Execute {
         contract_addr: config.offer_addr.to_string(),
-        msg: to_binary(&OfferRegisterHub {}).unwrap(),
+        msg: to_json_binary(&OfferRegisterHub {}).unwrap(),
         funds: info.funds.clone(),
     }));
 
     let price_register_hub = SubMsg::new(CosmosMsg::Wasm(WasmMsg::Execute {
         contract_addr: config.price_addr.to_string(),
-        msg: to_binary(&PriceRegisterHub {}).unwrap(),
+        msg: to_json_binary(&PriceRegisterHub {}).unwrap(),
         funds: info.funds.clone(),
     }));
 
     let profile_register_hub = SubMsg::new(CosmosMsg::Wasm(WasmMsg::Execute {
         contract_addr: config.profile_addr.to_string(),
-        msg: to_binary(&ProfileRegisterHub {}).unwrap(),
+        msg: to_json_binary(&ProfileRegisterHub {}).unwrap(),
         funds: info.funds.clone(),
     }));
 
     let trade_register_hub = SubMsg::new(CosmosMsg::Wasm(WasmMsg::Execute {
         contract_addr: config.trade_addr.to_string(),
-        msg: to_binary(&TradeRegisterHub {}).unwrap(),
+        msg: to_json_binary(&TradeRegisterHub {}).unwrap(),
         funds: info.funds.clone(),
     }));
 
@@ -172,8 +174,8 @@ fn update_admin(
 #[entry_point]
 pub fn query(deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {
     match msg {
-        QueryMsg::Config {} => to_binary(&CONFIG.load(deps.storage).unwrap()),
-        QueryMsg::Admin {} => to_binary(&ADMIN.load(deps.storage).unwrap()),
+        QueryMsg::Config {} => to_json_binary(&CONFIG.load(deps.storage).unwrap()),
+        QueryMsg::Admin {} => to_json_binary(&ADMIN.load(deps.storage).unwrap()),
     }
 }
 
diff --git a/contracts/cosmwasm/contracts/offer/Cargo.toml b/contracts/cosmwasm/contracts/offer/Cargo.toml
index cd594bd..40ac47d 100644
--- a/contracts/cosmwasm/contracts/offer/Cargo.toml
+++ b/contracts/cosmwasm/contracts/offer/Cargo.toml
@@ -17,22 +17,22 @@ crate-type = ["cdylib", "rlib"]
 
 [features]
 # for more explicit tests, cargo test --features=backtraces
-backtraces = ["cosmwasm-std/backtraces"]
+backtraces = []
 
 [dependencies]
-cosmwasm-std = { version = "1.0.0" }
+cosmwasm-std = "2.2.1"
 cosmwasm-storage = { version = "1.0.0" }
-thiserror = "1.0.25"
-schemars = "0.8.10"
-serde = { version = "1.0.103", default-features = false, features = ["derive"] }
-snafu = { version = "0.6.3" }
+thiserror = "1.0.45"
+schemars = "0.8.12"
+serde = { version = "1.0.188", default-features = false, features = ["derive"] }
+snafu = "0.7.4"
 localmoney-protocol = { path = "../../packages/protocol" }
-cw2 = { version = "0.13.1" }
-cw20 = { version = "0.13.1" }
-cw20-base = { version = "0.13.1" }
-cw-storage-plus = { version = "0.13.1", features = ["iterator"] }
+cw2 = "2.0.0"
+cw20 = "2.0.0"
+cw20-base = "2.0.0"
+cw-storage-plus = { version = "2.0.0" }
 rand = "0.7"
 
 [dev-dependencies]
-cosmwasm-schema = { version = "1.0.0" }
-cosmwasm-vm = { version = "1.0.0" }
+cosmwasm-schema = "2.2.0"
+cosmwasm-vm = "2.2.1"
diff --git a/contracts/cosmwasm/contracts/offer/src/contract.rs b/contracts/cosmwasm/contracts/offer/src/contract.rs
index a046d29..5f69cfb 100644
--- a/contracts/cosmwasm/contracts/offer/src/contract.rs
+++ b/contracts/cosmwasm/contracts/offer/src/contract.rs
@@ -1,6 +1,7 @@
-use crate::state::{offers_count_read, offers_count_storage};
+use crate::state::OFFERS_COUNT;
 use cosmwasm_std::{
-    entry_point, to_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult, SubMsg,
+    entry_point, to_json_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdError,
+    StdResult, SubMsg,
 };
 use cw2::{get_contract_version, set_contract_version};
 use localmoney_protocol::errors::ContractError;
@@ -27,14 +28,15 @@ pub fn instantiate(
     _info: MessageInfo,
     _msg: InstantiateMsg,
 ) -> Result<Response, ContractError> {
-    set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION).unwrap();
-
-    offers_count_storage(deps.storage)
-        .save(&OffersCount { count: 0 })
-        .unwrap();
-    let res = Response::new().add_attribute("action", "instantiate_offer");
-    Ok(res)
+    // Convert any StdError into ContractError explicitly.
+    set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)
+        .map_err(ContractError::Std)?;
+    OFFERS_COUNT
+        .save(deps.storage, &OffersCount { count: 0 })
+        .map_err(ContractError::Std)?;
+    Ok(Response::new().add_attribute("action", "instantiate_offer"))
 }
+
 #[entry_point]
 pub fn execute(
     deps: DepsMut,
@@ -52,8 +54,8 @@ pub fn execute(
 #[entry_point]
 pub fn query(deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {
     match msg {
-        QueryMsg::State {} => to_binary(&query_state(deps)?),
-        QueryMsg::Offer { id } => to_binary(&load_offer_by_id(deps, id)?),
+        QueryMsg::State {} => to_json_binary(&query_state(deps)?),
+        QueryMsg::Offer { id } => to_json_binary(&load_offer_by_id(deps, id)?),
         QueryMsg::OffersBy {
             offer_type,
             fiat_currency,
@@ -61,7 +63,7 @@ pub fn query(deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {
             order,
             limit,
             last,
-        } => to_binary(&OfferModel::query_by(
+        } => to_json_binary(&OfferModel::query_by(
             deps,
             offer_type,
             fiat_currency,
@@ -71,12 +73,12 @@ pub fn query(deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {
             last,
         )?),
         QueryMsg::OffersByOwner { owner, limit, last } => {
-            to_binary(&OfferModel::query_by_owner(deps, owner, limit, last)?)
+            to_json_binary(&OfferModel::query_by_owner(deps, owner, limit, last)?)
         }
     }
 }
 
-/// Creates a new offer
+/// Creates a new offer.
 pub fn create_offer(
     deps: DepsMut,
     env: Env,
@@ -85,17 +87,16 @@ pub fn create_offer(
 ) -> Result<Response, ContractError> {
     let hub_config = get_hub_config(deps.as_ref());
     assert_min_g_max(msg.min_amount, msg.max_amount)?;
+    assert_offer_description_valid(msg.description.clone())?;
 
-    assert_offer_description_valid(msg.description.clone()).unwrap();
-
-    // Load offers count to create the next sequential id, maybe we can switch to a hash based id in the future.
-    let mut offers_count = offers_count_storage(deps.storage)
-        .load()
-        .unwrap_or(OffersCount { count: 0 });
+    // Load offers count to create the next sequential id.
+    let mut offers_count = OFFERS_COUNT
+        .load(deps.storage)
+        .map_err(ContractError::Std)?;
     offers_count.count += 1;
     let offer_id = offers_count.count;
 
-    // Update profile contact info
+    // Update profile contact info.
     let update_profile_contact_msg = update_profile_contact_msg(
         hub_config.profile_addr.to_string(),
         info.sender.clone(),
@@ -121,19 +122,19 @@ pub fn create_offer(
     )
     .offer;
 
-    // Update offers count
-    offers_count_storage(deps.storage)
-        .save(&offers_count)
-        .unwrap();
+    // Update offers count.
+    OFFERS_COUNT
+        .save(deps.storage, &offers_count)
+        .map_err(ContractError::Std)?;
 
-    // Update profile active offers
+    // Update profile active offers.
     let update_profile_offers_msg = update_profile_active_offers_msg(
         hub_config.profile_addr.to_string(),
         info.sender.clone(),
         offer.state,
     );
 
-    let res = Response::new()
+    Ok(Response::new()
         .add_submessage(update_profile_contact_msg)
         .add_submessage(update_profile_offers_msg)
         .add_attribute("action", "create_offer")
@@ -142,8 +143,7 @@ pub fn create_offer(
         .add_attribute("rate", offer.rate.to_string())
         .add_attribute("min_amount", offer.min_amount.to_string())
         .add_attribute("max_amount", offer.max_amount.to_string())
-        .add_attribute("owner", offer.owner);
-    Ok(res)
+        .add_attribute("owner", offer.owner.to_string()))
 }
 
 pub fn update_offer(
@@ -158,8 +158,7 @@ pub fn update_offer(
     let mut offer_model = OfferModel::may_load(deps.storage, msg.id);
 
     assert_ownership(info.sender.clone(), offer_model.offer.owner.clone())?;
-
-    assert_offer_description_valid(msg.description.clone()).unwrap();
+    assert_offer_description_valid(msg.description.clone())?;
 
     let mut sub_msgs: Vec<SubMsg> = Vec::new();
     if msg.owner_contact.is_some() && msg.owner_encryption_key.is_some() {
@@ -180,54 +179,52 @@ pub fn update_offer(
 
     let offer = offer_model.update(msg);
 
-    let res = Response::new()
+    Ok(Response::new()
         .add_submessages(sub_msgs)
         .add_attribute("action", "update_offer")
         .add_attribute("id", offer.id.to_string())
-        .add_attribute("owner", offer.owner.to_string());
-
-    Ok(res)
+        .add_attribute("owner", offer.owner.to_string()))
 }
 
 fn register_hub(deps: DepsMut, info: MessageInfo) -> Result<Response, ContractError> {
-    register_hub_internal(info.sender, deps.storage, HubAlreadyRegistered {})
+    // Supply two generic arguments to register_hub_internal.
+    register_hub_internal::<ContractError, ContractError>(
+        info.sender,
+        deps.storage,
+        HubAlreadyRegistered {},
+    )?;
+    Ok(Response::new().add_attribute("action", "register_hub"))
 }
 
 fn query_state(deps: Deps) -> StdResult<OffersCount> {
-    let state = offers_count_read(deps.storage).load().unwrap();
-    Ok(state)
+    OFFERS_COUNT.load(deps.storage)
 }
 
 pub fn load_offer_by_id(deps: Deps, id: u64) -> StdResult<OfferResponse> {
     let hub_config = get_hub_config(deps);
     let offer = offers()
-        .may_load(deps.storage, id)
-        .unwrap_or_default()
-        .unwrap();
+        .may_load(deps.storage, id)?
+        .ok_or_else(|| StdError::not_found("Offer"))?;
     let profile = load_profile(
         &deps.querier,
         hub_config.profile_addr.to_string(),
         offer.owner.clone(),
-    )
-    .unwrap();
+    )?;
     Ok(OfferResponse { offer, profile })
 }
 
 #[cfg_attr(not(feature = "library"), entry_point)]
 pub fn migrate(deps: DepsMut, _env: Env, _msg: MigrateMsg) -> Result<Response, ContractError> {
-    let previous_contract_version = get_contract_version(deps.storage).unwrap();
-
+    let previous_contract_version =
+        get_contract_version(deps.storage).map_err(ContractError::Std)?;
     assert_migration_parameters(
         previous_contract_version.clone(),
         CONTRACT_NAME.to_string(),
         CONTRACT_VERSION,
-    )
-    .unwrap();
-
-    set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION).unwrap();
-    // If the structure of the data in storage changes, we must treat it here
-
-    Ok(Response::default()
+    )?;
+    set_contract_version(deps.storage, CONTRACT_NAME, CONTRACT_VERSION)
+        .map_err(ContractError::Std)?;
+    Ok(Response::new()
         .add_attribute("previous_version", previous_contract_version.version)
         .add_attribute("new_version", CONTRACT_VERSION)
         .add_attribute("name", CONTRACT_NAME))
diff --git a/contracts/cosmwasm/contracts/offer/src/state.rs b/contracts/cosmwasm/contracts/offer/src/state.rs
index 8797b90..39d518c 100644
--- a/contracts/cosmwasm/contracts/offer/src/state.rs
+++ b/contracts/cosmwasm/contracts/offer/src/state.rs
@@ -1,13 +1,17 @@
-use cosmwasm_std::{Addr, Storage};
-use cosmwasm_storage::{singleton, singleton_read, ReadonlySingleton, Singleton};
-use cw_storage_plus::{Index, IndexList, IndexedMap, MultiIndex};
+use cosmwasm_std::Addr;
+use cw_storage_plus::{Index, IndexList, IndexedMap, Item, MultiIndex};
 
 use localmoney_protocol::offer::{OffersCount, TradeAddr};
 
-pub static OFFERS_COUNT_KEY: &[u8] = b"offers_count_v0_4_1";
+/// The storage key for offers count; note that cw-storage-plus items use &str keys.
+pub const OFFERS_COUNT: Item<OffersCount> = Item::new("offers_count_v0_4_1");
 
+/// TradeIndexes now uses the new generic ordering:
+///   MultiIndex<'a, T, K, P> where:
+///   - T is the main data type (TradeAddr),
+///   - K is the index key type (Addr, in this case),
+///   - P is the primary key type (here a Vec<u8>).
 pub struct TradeIndexes<'a> {
-    // pk goes to second tuple element
     pub seller: MultiIndex<'a, Addr, TradeAddr, Vec<u8>>,
     pub buyer: MultiIndex<'a, Addr, TradeAddr, Vec<u8>>,
     pub arbitrator: MultiIndex<'a, Addr, TradeAddr, Vec<u8>>,
@@ -20,23 +24,26 @@ impl<'a> IndexList<TradeAddr> for TradeIndexes<'a> {
     }
 }
 
-pub fn trades<'a>() -> IndexedMap<'a, &'a str, TradeAddr, TradeIndexes<'a>> {
+/// Returns an IndexedMap for TradeAddr objects with the new index types.
+/// The primary map key is a &str (typically a unique identifier), and
+/// the indexes extract the seller, buyer, and arbitrator fields.
+pub fn trades() -> IndexedMap<&'static str, TradeAddr, TradeIndexes<'static>> {
     let indexes = TradeIndexes {
-        seller: MultiIndex::new(|d: &TradeAddr| d.seller.clone(), "trades", "trades__seller"),
-        buyer: MultiIndex::new(|d: &TradeAddr| d.buyer.clone(), "trades", "trades__buyer"),
+        seller: MultiIndex::new(
+            |_pk, d: &TradeAddr| d.seller.clone(),
+            "trades",
+            "trades__seller",
+        ),
+        buyer: MultiIndex::new(
+            |_pk, d: &TradeAddr| d.buyer.clone(),
+            "trades",
+            "trades__buyer",
+        ),
         arbitrator: MultiIndex::new(
-            |d: &TradeAddr| d.arbitrator.clone(),
+            |_pk, d: &TradeAddr| d.arbitrator.clone(),
             "trades",
             "trades__arbitrator",
         ),
     };
     IndexedMap::new("trades", indexes)
 }
-
-pub fn offers_count_storage(storage: &mut dyn Storage) -> Singleton<OffersCount> {
-    singleton(storage, OFFERS_COUNT_KEY)
-}
-
-pub fn offers_count_read(storage: &dyn Storage) -> ReadonlySingleton<OffersCount> {
-    singleton_read(storage, OFFERS_COUNT_KEY)
-}
diff --git a/contracts/cosmwasm/contracts/price/Cargo.toml b/contracts/cosmwasm/contracts/price/Cargo.toml
index 94f263f..b7f2d49 100644
--- a/contracts/cosmwasm/contracts/price/Cargo.toml
+++ b/contracts/cosmwasm/contracts/price/Cargo.toml
@@ -17,22 +17,22 @@ crate-type = ["cdylib", "rlib"]
 
 [features]
 # for more explicit tests, cargo test --features=backtraces
-backtraces = ["cosmwasm-std/backtraces"]
+backtraces = []
 # use library feature to disable all instantiate/execute/query exports
 library = []
 
 [dependencies]
-cosmwasm-std = { version = "1.0.0" }
+cosmwasm-std = "2.2.1"
 cosmwasm-storage = { version = "1.0.0" }
-thiserror = "1.0.25"
-schemars = "0.8.10"
-serde = { version = "1.0.103", default-features = false, features = ["derive"] }
-snafu = { version = "0.6.3" }
-cw2 = { version = "0.13.1" }
-cw20 = { version = "0.13.1" }
+thiserror = "1.0.45"
+schemars = "0.8.12"
+serde = { version = "1.0.188", default-features = false, features = ["derive"] }
+snafu = "0.7.4"
+cw2 = "2.0.0"
+cw20 = "2.0.0"
 localmoney-protocol = { path = "../../packages/protocol" }
-cw-storage-plus = { version = "0.13.1", features = ["iterator"] }
+cw-storage-plus = { version = "2.0.0" }
 
 [dev-dependencies]
-cosmwasm-schema = { version = "1.0.0" }
-cosmwasm-vm = { version = "1.0.0" }
+cosmwasm-schema = "2.2.0"
+cosmwasm-vm = "2.2.1"
diff --git a/contracts/cosmwasm/contracts/price/src/contract.rs b/contracts/cosmwasm/contracts/price/src/contract.rs
index 9703194..e443ad0 100644
--- a/contracts/cosmwasm/contracts/price/src/contract.rs
+++ b/contracts/cosmwasm/contracts/price/src/contract.rs
@@ -3,8 +3,8 @@ use std::ops::{Div, Mul};
 #[cfg(not(feature = "library"))]
 use cosmwasm_std::entry_point;
 use cosmwasm_std::{
-    to_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdError, StdResult, Uint128,
-    Uint256,
+    to_json_binary, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdError, StdResult,
+    Uint128, Uint256,
 };
 use cw2::{get_contract_version, set_contract_version};
 use cw20::Denom;
@@ -16,8 +16,7 @@ use localmoney_protocol::guards::{assert_migration_parameters, assert_ownership}
 use localmoney_protocol::hub_utils::{get_hub_admin, get_hub_config, register_hub_internal};
 use localmoney_protocol::price::{
     AssetInfo, CurrencyPrice, DenomFiatPrice, ExecuteMsg, NativeToken, OfferAsset, PriceRoute,
-    QueryMsg, Simulation, SimulationResponse, SimulationResponseData, SwapSimulation,
-    DENOM_PRICE_ROUTE, FIAT_PRICE,
+    QueryMsg, Simulation, SimulationResponseData, SwapSimulation, DENOM_PRICE_ROUTE, FIAT_PRICE,
 };
 use localmoney_protocol::profile::{InstantiateMsg, MigrateMsg};
 
@@ -57,7 +56,7 @@ pub fn execute(
 pub fn query(deps: Deps, _env: Env, msg: QueryMsg) -> StdResult<Binary> {
     match msg {
         QueryMsg::Price { fiat, denom } => {
-            to_binary(&query_fiat_price_for_denom(deps, fiat, denom)?)
+            to_json_binary(&query_fiat_price_for_denom(deps, fiat, denom)?)
         }
     }
 }
@@ -135,7 +134,7 @@ pub fn query_fiat_price_for_denom(
             }
             route
         }
-        Err(e) => return Err(StdError::generic_err("No price route for LUNA")),
+        Err(_e) => return Err(StdError::generic_err("No price route for LUNA")),
     };
 
     // Query the price of LUNA in USDC
diff --git a/contracts/cosmwasm/contracts/profile/Cargo.toml b/contracts/cosmwasm/contracts/profile/Cargo.toml
index 08edf4a..20afa2f 100644
--- a/contracts/cosmwasm/contracts/profile/Cargo.toml
+++ b/contracts/cosmwasm/contracts/profile/Cargo.toml
@@ -17,22 +17,22 @@ crate-type = ["cdylib", "rlib"]
 
 [features]
 # for more explicit tests, cargo test --features=backtraces
-backtraces = ["cosmwasm-std/backtraces"]
+backtraces = []
 # use library feature to disable all instantiate/execute/query exports
 library = []
 
 [dependencies]
-cosmwasm-std = { version = "1.0.0" }
+cosmwasm-std = "2.2.1"
 cosmwasm-storage = { version = "1.0.0" }
-thiserror = "1.0.25"
-schemars = "0.8.10"
-serde = { version = "1.0.103", default-features = false, features = ["derive"] }
-snafu = { version = "0.6.3" }
-cw2 = { version = "0.13.1" }
-cw20 = { version = "0.13.1" }
+thiserror = "1.0.45"
+schemars = "0.8.12"
+serde = { version = "1.0.188", default-features = false, features = ["derive"] }
+snafu = "0.7.4"
+cw2 = "2.0.0"
+cw20 = "2.0.0"
 localmoney-protocol = { path = "../../packages/protocol" }
-cw-storage-plus = { version = "0.13.1", features = ["iterator"] }
+cw-storage-plus = { version = "2.0.0" }
 
 [dev-dependencies]
-cosmwasm-schema = { version = "1.0.0" }
-cosmwasm-vm = { version = "1.0.0" }
+cosmwasm-schema = "2.2.0"
+cosmwasm-vm = "2.2.1"
diff --git a/contracts/cosmwasm/contracts/profile/src/contract.rs b/contracts/cosmwasm/contracts/profile/src/contract.rs
index b96fc6a..c524bb7 100644
--- a/contracts/cosmwasm/contracts/profile/src/contract.rs
+++ b/contracts/cosmwasm/contracts/profile/src/contract.rs
@@ -1,6 +1,8 @@
 #[cfg(not(feature = "library"))]
 use cosmwasm_std::entry_point;
-use cosmwasm_std::{to_binary, Addr, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult};
+use cosmwasm_std::{
+    to_json_binary, Addr, Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult,
+};
 use cw2::{get_contract_version, set_contract_version};
 use localmoney_protocol::errors::ContractError;
 use localmoney_protocol::errors::ContractError::HubAlreadyRegistered;
@@ -203,10 +205,10 @@ fn register_hub(deps: DepsMut, info: MessageInfo) -> Result<Response, ContractEr
 pub fn query(deps: Deps, env: Env, msg: QueryMsg) -> StdResult<Binary> {
     match msg {
         QueryMsg::Profile { addr } => {
-            to_binary(&ProfileModel::query_profile(deps.storage, addr.clone()))
+            to_json_binary(&ProfileModel::query_profile(deps.storage, addr.clone()))
         }
         QueryMsg::Profiles { limit, start_at } => {
-            to_binary(&ProfileModel::query_profiles(deps, env, limit, start_at)?)
+            to_json_binary(&ProfileModel::query_profiles(deps, env, limit, start_at)?)
         }
     }
 }
diff --git a/contracts/cosmwasm/contracts/trade/Cargo.toml b/contracts/cosmwasm/contracts/trade/Cargo.toml
index 1f3a83c..c6023dd 100644
--- a/contracts/cosmwasm/contracts/trade/Cargo.toml
+++ b/contracts/cosmwasm/contracts/trade/Cargo.toml
@@ -17,21 +17,21 @@ crate-type = ["cdylib", "rlib"]
 
 [features]
 # for more explicit tests, cargo test --features=backtraces
-backtraces = ["cosmwasm-std/backtraces"]
+backtraces = []
 
 [dependencies]
-cosmwasm-std = { version = "1.0.0" }
+cosmwasm-std = "2.2.1"
 cosmwasm-storage = { version = "1.0.0" }
-thiserror = "1.0.25"
-schemars = "0.8.10"
-serde = { version = "1.0.103", default-features = false, features = ["derive"] }
-snafu = { version = "0.6.3" }
+thiserror = "1.0.45"
+schemars = "0.8.12"
+serde = { version = "1.0.188", default-features = false, features = ["derive"] }
+snafu = "0.7.4"
 localmoney-protocol = { path = "../../packages/protocol" }
-cw2 = { version = "0.13.1" }
-cw20 = { version = "0.13.1" }
-cw20-base = { version = "0.13.1" }
-cw-storage-plus = { version = "0.13.1", features = ["iterator"] }
+cw2 = "2.0.0"
+cw20 = "2.0.0"
+cw20-base = "2.0.0"
+cw-storage-plus = { version = "2.0.0" }
 
 [dev-dependencies]
-cosmwasm-schema = { version = "1.0.0" }
-cosmwasm-vm = { version = "1.0.0" }
+cosmwasm-schema = "2.2.0"
+cosmwasm-vm = "2.2.1"
diff --git a/contracts/cosmwasm/contracts/trade/schema/config_response.json b/contracts/cosmwasm/contracts/trade/schema/config_response.json
index c413349..5d41090 100644
--- a/contracts/cosmwasm/contracts/trade/schema/config_response.json
+++ b/contracts/cosmwasm/contracts/trade/schema/config_response.json
@@ -16,26 +16,23 @@
       "minimum": 0.0
     },
     "buyer": {
-      "$ref": "#/definitions/CanonicalAddr"
+      "$ref": "#/definitions/Addr"
     },
     "offer": {
-      "$ref": "#/definitions/CanonicalAddr"
+      "$ref": "#/definitions/Addr"
     },
     "seller": {
-      "$ref": "#/definitions/CanonicalAddr"
+      "$ref": "#/definitions/Addr"
     },
     "state": {
       "$ref": "#/definitions/TradeState"
     }
   },
   "definitions": {
-    "Binary": {
-      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
+    "Addr": {
+      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32-encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated addresses.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
       "type": "string"
     },
-    "CanonicalAddr": {
-      "$ref": "#/definitions/Binary"
-    },
     "TradeState": {
       "type": "string",
       "enum": [
diff --git a/contracts/cosmwasm/contracts/trade/schema/state.json b/contracts/cosmwasm/contracts/trade/schema/state.json
index cd21c53..03a9735 100644
--- a/contracts/cosmwasm/contracts/trade/schema/state.json
+++ b/contracts/cosmwasm/contracts/trade/schema/state.json
@@ -16,26 +16,23 @@
       "minimum": 0.0
     },
     "buyer": {
-      "$ref": "#/definitions/CanonicalAddr"
+      "$ref": "#/definitions/Addr"
     },
     "offer": {
-      "$ref": "#/definitions/CanonicalAddr"
+      "$ref": "#/definitions/Addr"
     },
     "seller": {
-      "$ref": "#/definitions/CanonicalAddr"
+      "$ref": "#/definitions/Addr"
     },
     "state": {
       "$ref": "#/definitions/TradeState"
     }
   },
   "definitions": {
-    "Binary": {
-      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
+    "Addr": {
+      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32-encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated addresses.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
       "type": "string"
     },
-    "CanonicalAddr": {
-      "$ref": "#/definitions/Binary"
-    },
     "TradeState": {
       "type": "string",
       "enum": [
diff --git a/contracts/cosmwasm/contracts/trade/src/contract.rs b/contracts/cosmwasm/contracts/trade/src/contract.rs
index ccf27bd..2813378 100644
--- a/contracts/cosmwasm/contracts/trade/src/contract.rs
+++ b/contracts/cosmwasm/contracts/trade/src/contract.rs
@@ -1,10 +1,10 @@
 use cosmwasm_std::{
-    coin, entry_point, to_binary, Addr, BankMsg, Binary, Coin, CosmosMsg, CustomQuery, Deps,
-    DepsMut, Env, MessageInfo, Reply, ReplyOn, Response, StdResult, SubMsg, Uint128, Uint256,
-    WasmMsg,
+    coin, entry_point, to_json_binary, Addr, BankMsg, Binary, Coin, CosmosMsg, CustomQuery,
+    Decimal, Deps, DepsMut, Env, MessageInfo, Reply, ReplyOn, Response, StdResult, SubMsg, Uint128,
+    Uint256, WasmMsg,
 };
 use cw2::{get_contract_version, set_contract_version};
-use std::ops::{Mul, Sub};
+use std::ops::Sub;
 
 use cw20::Denom;
 use localmoney_protocol::currencies::FiatCurrency;
@@ -169,8 +169,8 @@ fn create_trade(
         .unwrap_or(Uint256::zero());
 
     // The min amount
-    let min_amount = Uint256::from_u128(hub_cfg.trade_limit_min);
-    let max_amount = Uint256::from_u128(hub_cfg.trade_limit_max);
+    let min_amount = Uint256::from_u128(hub_cfg.trade_limit_min.u128());
+    let max_amount = Uint256::from_u128(hub_cfg.trade_limit_max.u128());
 
     // Check that usd_trade_amount is lower or equal than the trade limit and return error if not.
     if usd_trade_amount < min_amount || usd_trade_amount > max_amount {
@@ -295,22 +295,23 @@ fn create_trade(
 #[entry_point]
 pub fn query(deps: Deps, env: Env, msg: QueryMsg) -> StdResult<Binary> {
     match msg {
-        QueryMsg::Trade { id } => to_binary(&query_trade(env, deps, id)?),
+        QueryMsg::Trade { id } => to_json_binary(&query_trade(env, deps, id)?),
         QueryMsg::Trades {
             user,
             role,
             limit,
             last,
-        } => to_binary(&query_trades(env, deps, user, role, limit, last)?),
-        QueryMsg::Arbitrator { arbitrator } => to_binary(&ArbitratorModel::query_arbitrator(
+        } => to_json_binary(&query_trades(env, deps, user, role, limit, last)?),
+        QueryMsg::Arbitrator { arbitrator } => to_json_binary(&ArbitratorModel::query_arbitrator(
             deps.storage,
             arbitrator,
         )?),
-        QueryMsg::Arbitrators {} => to_binary(&ArbitratorModel::query_arbitrators(deps.storage)?),
-        QueryMsg::ArbitratorsFiat { fiat } => to_binary(&ArbitratorModel::query_arbitrators_fiat(
-            deps.storage,
-            fiat,
-        )?),
+        QueryMsg::Arbitrators {} => {
+            to_json_binary(&ArbitratorModel::query_arbitrators(deps.storage)?)
+        }
+        QueryMsg::ArbitratorsFiat { fiat } => to_json_binary(
+            &ArbitratorModel::query_arbitrators_fiat(deps.storage, fiat)?,
+        ),
     }
 }
 
@@ -970,8 +971,10 @@ fn settle_dispute(
     );
 
     // Pay arbitration fee
-    let arbitration_fee_amount = trade.amount.mul(hub_config.arbitration_fee_pct);
-    let mut release_amount = trade.amount.sub(arbitration_fee_amount);
+    let arbitration_fee_amount = (hub_config.arbitration_fee_pct
+        * Decimal::from_ratio(trade.amount.u128(), 1u128))
+    .atomics();
+    let mut release_amount = trade.amount.sub(Uint128::from(arbitration_fee_amount));
 
     // Only deducts fees from the release_amount if the maker (offer owner) is the buyer
     if trade.buyer.eq(&offer.owner) {
@@ -1131,14 +1134,15 @@ fn handle_swap_reply(deps: DepsMut, _msg: Reply) -> Result<Response, ContractErr
                 ("received_denom", received_asset_balance.denom.clone()),
             ])
             .add_submessage(SubMsg {
-                id: SWAP_REPLY_ID,
+                id: 0,
                 msg: CosmosMsg::Wasm(WasmMsg::Execute {
                     contract_addr: route_step.pool.to_string(),
-                    msg: to_binary(&SwapMsg { swap: Swap {} }).unwrap(),
+                    msg: to_json_binary(&SwapMsg { swap: Swap {} }).unwrap(),
                     funds: vec![received_asset_balance],
                 }),
                 gas_limit: None,
                 reply_on: ReplyOn::Success,
+                payload: Binary::default(),
             });
         Ok(res)
     } else {
@@ -1173,14 +1177,17 @@ fn create_send_msg(to_address: Addr, amount: Vec<Coin>) -> CosmosMsg {
 
 /// Returns a FeeInfo struct containing the calculated fees and the final release amount.
 fn calculate_fees(hub_config: &HubConfig, amount: Uint128) -> FeeInfo {
-    let burn_amount = amount.mul(hub_config.burn_fee_pct);
-    let chain_amount = amount.mul(hub_config.chain_fee_pct);
-    let warchest_amount = amount.mul(hub_config.warchest_fee_pct);
+    let amount_u128 = amount.u128();
+    let burn_amount = (hub_config.burn_fee_pct * Decimal::from_ratio(amount_u128, 1u128)).atomics();
+    let chain_amount =
+        (hub_config.chain_fee_pct * Decimal::from_ratio(amount_u128, 1u128)).atomics();
+    let warchest_amount =
+        (hub_config.warchest_fee_pct * Decimal::from_ratio(amount_u128, 1u128)).atomics();
 
     FeeInfo {
-        burn_amount,
-        chain_amount,
-        warchest_amount,
+        burn_amount: Uint128::from(burn_amount),
+        chain_amount: Uint128::from(chain_amount),
+        warchest_amount: Uint128::from(warchest_amount),
     }
 }
 
@@ -1237,11 +1244,12 @@ fn add_protocol_fees_msgs(
                 id: SWAP_REPLY_ID,
                 msg: CosmosMsg::Wasm(WasmMsg::Execute {
                     contract_addr: conversion_route.pool.to_string(),
-                    msg: to_binary(&SwapMsg { swap: Swap {} }).unwrap(),
+                    msg: to_json_binary(&SwapMsg { swap: Swap {} }).unwrap(),
                     funds: vec![coin(fee_info.burn_amount.u128(), trade_denom.clone())],
                 }),
                 gas_limit: None,
                 reply_on: ReplyOn::Success,
+                payload: Binary::default(),
             });
         } else {
             //If coin being traded is $LOCAL, add message burning the local_burn amount
diff --git a/contracts/cosmwasm/packages/protocol/Cargo.toml b/contracts/cosmwasm/packages/protocol/Cargo.toml
index 81b0125..52adf7d 100644
--- a/contracts/cosmwasm/packages/protocol/Cargo.toml
+++ b/contracts/cosmwasm/packages/protocol/Cargo.toml
@@ -14,18 +14,18 @@ documentation = "https://localmoney.gitbook.io"
 [features]
 # for quicker tests, cargo test --lib
 # for more explicit tests, cargo test --features=backtraces
-backtraces = ["cosmwasm-std/backtraces"]
+backtraces = []
 
 [dependencies]
-cw2 = { version = "0.13.1" }
-cw20 = { version = "0.13.1" }
-cosmwasm-std = { version = "1.0.0" }
+cw2 = "2.0.0"
+cw20 = "2.0.0"
+cosmwasm-std = "2.2.1"
 cosmwasm-storage = { version = "1.0.0" }
-cw-storage-plus = { version = "0.13.1", features = ["iterator"] }
-schemars = "0.8.10"
-serde = { version = "1.0.103", default-features = false, features = ["derive"] }
-thiserror = "1.0.25"
+cw-storage-plus = { version = "2.0.0" }
+schemars = "0.8.12"
+serde = { version = "1.0.188", default-features = false, features = ["derive"] }
+thiserror = "1.0.45"
 
 [dev-dependencies]
-cosmwasm-schema = { version = "1.0.0" }
-cosmwasm-vm = { version = "1.0.0" }
+cosmwasm-schema = "2.2.0"
+cosmwasm-vm = "2.2.1"
diff --git a/contracts/cosmwasm/packages/protocol/src/errors.rs b/contracts/cosmwasm/packages/protocol/src/errors.rs
index 90d7423..ba8c24e 100644
--- a/contracts/cosmwasm/packages/protocol/src/errors.rs
+++ b/contracts/cosmwasm/packages/protocol/src/errors.rs
@@ -1,6 +1,6 @@
 use crate::offer::OfferState;
 use crate::trade::TradeState;
-use cosmwasm_std::{Addr, Uint128, Uint256, Uint64};
+use cosmwasm_std::{Addr, StdError, Uint128, Uint256, Uint64};
 use thiserror::Error;
 
 #[derive(Error, Debug)]
@@ -15,6 +15,8 @@ pub enum ContractError {
         parameter: String,
         message: Option<String>,
     },
+    #[error("{0}")]
+    Std(#[from] StdError),
     /// Hub Errors
     #[error("Hub already registered.")]
     HubAlreadyRegistered {},
diff --git a/contracts/cosmwasm/packages/protocol/src/hub.rs b/contracts/cosmwasm/packages/protocol/src/hub.rs
index 77be630..8866995 100644
--- a/contracts/cosmwasm/packages/protocol/src/hub.rs
+++ b/contracts/cosmwasm/packages/protocol/src/hub.rs
@@ -1,4 +1,4 @@
-use cosmwasm_std::{Addr, Decimal};
+use cosmwasm_std::{Addr, Decimal, Uint128};
 use cw20::Denom;
 use schemars::JsonSchema;
 use serde::{Deserialize, Serialize};
@@ -47,8 +47,8 @@ pub struct HubConfig {
     pub warchest_fee_pct: Decimal,
     pub trade_expiration_timer: u64, // in seconds
     pub trade_dispute_timer: u64,
-    pub trade_limit_min: u128, // in USD
-    pub trade_limit_max: u128, // in USD
+    pub trade_limit_min: Uint128, // in USD
+    pub trade_limit_max: Uint128, // in USD
 }
 
 #[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]
diff --git a/contracts/cosmwasm/packages/protocol/src/hub_utils.rs b/contracts/cosmwasm/packages/protocol/src/hub_utils.rs
index 99870ee..66978a6 100644
--- a/contracts/cosmwasm/packages/protocol/src/hub_utils.rs
+++ b/contracts/cosmwasm/packages/protocol/src/hub_utils.rs
@@ -1,6 +1,7 @@
 use crate::hub::{Admin, HubConfig, QueryMsg};
 use cosmwasm_std::{
-    to_binary, Addr, CustomQuery, Deps, QueryRequest, Response, Storage, WasmQuery,
+    to_json_binary, Addr, CustomQuery, Deps, QuerierWrapper, QueryRequest, Response, Storage,
+    WasmQuery,
 };
 use cw_storage_plus::Item;
 use schemars::JsonSchema;
@@ -11,7 +12,7 @@ pub fn get_hub_config<T: CustomQuery>(deps: Deps<T>) -> HubConfig {
     deps.querier
         .query(&QueryRequest::Wasm(WasmQuery::Smart {
             contract_addr: hub_addr.addr.to_string(),
-            msg: to_binary(&QueryMsg::Config {}).unwrap(),
+            msg: to_json_binary(&QueryMsg::Config {}).unwrap(),
         }))
         .unwrap()
 }
@@ -21,7 +22,7 @@ pub fn get_hub_admin<T: CustomQuery>(deps: Deps<T>) -> Admin {
     deps.querier
         .query(&QueryRequest::Wasm(WasmQuery::Smart {
             contract_addr: hub_addr.addr.to_string(),
-            msg: to_binary(&QueryMsg::Admin {}).unwrap(),
+            msg: to_json_binary(&QueryMsg::Admin {}).unwrap(),
         }))
         .unwrap()
 }
@@ -61,3 +62,26 @@ pub fn register_hub_internal<T, E>(
 pub struct HubAddr {
     pub addr: Addr,
 }
+
+pub fn query_hub_config<T: CustomQuery>(
+    querier: &QuerierWrapper<T>,
+    hub_addr: String,
+) -> HubConfig {
+    let res: HubConfig = querier
+        .query(&QueryRequest::Wasm(WasmQuery::Smart {
+            contract_addr: hub_addr,
+            msg: to_json_binary(&QueryMsg::Config {}).unwrap(),
+        }))
+        .unwrap();
+    res
+}
+
+pub fn query_hub_admin<T: CustomQuery>(querier: &QuerierWrapper<T>, hub_addr: String) -> Admin {
+    let res: Admin = querier
+        .query(&QueryRequest::Wasm(WasmQuery::Smart {
+            contract_addr: hub_addr,
+            msg: to_json_binary(&QueryMsg::Admin {}).unwrap(),
+        }))
+        .unwrap();
+    res
+}
diff --git a/contracts/cosmwasm/packages/protocol/src/offer.rs b/contracts/cosmwasm/packages/protocol/src/offer.rs
index e22a596..3aaa268 100644
--- a/contracts/cosmwasm/packages/protocol/src/offer.rs
+++ b/contracts/cosmwasm/packages/protocol/src/offer.rs
@@ -10,7 +10,7 @@ use cw_storage_plus::{Bound, Index, IndexList, IndexedMap, MultiIndex};
 use schemars::JsonSchema;
 use serde::{Deserialize, Serialize};
 use std::fmt::{self};
-use std::ops::Add;
+
 
 pub static CONFIG_KEY: &[u8] = b"config";
 
@@ -18,33 +18,39 @@ pub struct OfferIndexes<'a> {
     // pk goes to second tuple element
     pub owner: MultiIndex<'a, Addr, Offer, u64>,
     pub filter: MultiIndex<'a, String, Offer, u64>,
+    pub state: MultiIndex<'a, String, Offer, u64>,
 }
 
 impl<'a> IndexList<Offer> for OfferIndexes<'a> {
     fn get_indexes(&'_ self) -> Box<dyn Iterator<Item = &'_ dyn Index<Offer>> + '_> {
-        let v: Vec<&dyn Index<Offer>> = vec![&self.owner, &self.filter];
+        let v: Vec<&dyn Index<Offer>> = vec![&self.owner, &self.filter, &self.state];
         Box::new(v.into_iter())
     }
 }
 
-pub fn offers<'a>() -> IndexedMap<'a, u64, Offer, OfferIndexes<'a>> {
-    let offers_pk_namespace = "offers";
+pub fn offers() -> IndexedMap<u64, Offer, OfferIndexes<'static>> {
     let indexes = OfferIndexes {
-        owner: MultiIndex::new(|d| d.owner.clone(), offers_pk_namespace, "offers__owner"),
+        owner: MultiIndex::new(|_, d: &Offer| d.owner.clone(), "offers", "offers__owner"),
         filter: MultiIndex::new(
-            |offer: &Offer| {
-                offer
-                    .fiat_currency
-                    .to_string()
-                    .add(offer.offer_type.to_string().as_str())
-                    .add(denom_to_string(&offer.denom).as_str())
-                    .add(&offer.state.to_string())
+            |_, offer: &Offer| {
+                format!(
+                    "{}{}{}{}",
+                    offer.offer_type.to_string(),
+                    &offer.fiat_currency.to_string(),
+                    &denom_to_string(&offer.denom),
+                    &offer.state.to_string()
+                )
             },
-            offers_pk_namespace,
+            "offers",
             "offers__filter",
         ),
+        state: MultiIndex::new(
+            |_, d: &Offer| d.state.to_string(),
+            "offers",
+            "offers__state",
+        ),
     };
-    IndexedMap::new(offers_pk_namespace, indexes)
+    IndexedMap::new("offers", indexes)
 }
 
 ///Messages
@@ -138,12 +144,12 @@ pub struct OfferModel<'a> {
     pub storage: &'a mut dyn Storage,
 }
 
-impl OfferModel<'_> {
+impl<'a> OfferModel<'a> {
     pub fn store(storage: &mut dyn Storage, offer: &Offer) -> StdResult<()> {
         offers().save(storage, offer.id, &offer)
     }
 
-    pub fn from_store(storage: &mut dyn Storage, id: u64) -> Offer {
+    pub fn from_store(storage: &dyn Storage, id: u64) -> Offer {
         offers().may_load(storage, id).unwrap_or_default().unwrap()
     }
 
@@ -152,12 +158,12 @@ impl OfferModel<'_> {
         OfferModel { offer, storage }
     }
 
-    pub fn save<'a>(self) -> Offer {
+    pub fn save(self) -> Offer {
         OfferModel::store(self.storage, &self.offer).unwrap();
         self.offer
     }
 
-    pub fn may_load<'a>(storage: &'a mut dyn Storage, id: u64) -> OfferModel<'a> {
+    pub fn may_load(storage: &'a mut dyn Storage, id: u64) -> OfferModel<'a> {
         let offer_model = OfferModel {
             offer: OfferModel::from_store(storage, id),
             storage,
diff --git a/contracts/cosmwasm/packages/protocol/src/profile.rs b/contracts/cosmwasm/packages/protocol/src/profile.rs
index bb9783c..3be6659 100644
--- a/contracts/cosmwasm/packages/protocol/src/profile.rs
+++ b/contracts/cosmwasm/packages/protocol/src/profile.rs
@@ -1,7 +1,7 @@
 use crate::{offer::OfferState, trade::TradeState};
 use cosmwasm_std::{
-    to_binary, Addr, CosmosMsg, CustomQuery, Deps, Env, Order, QuerierWrapper, StdResult, Storage,
-    SubMsg, WasmMsg,
+    to_json_binary, Addr, CosmosMsg, CustomQuery, Deps, Env, Order, QuerierWrapper, StdResult,
+    Storage, SubMsg, WasmMsg,
 };
 use cw_storage_plus::{Index, IndexList, IndexedMap, MultiIndex};
 use schemars::JsonSchema;
@@ -50,7 +50,7 @@ pub fn update_profile_contact_msg(
 ) -> SubMsg {
     SubMsg::new(CosmosMsg::Wasm(WasmMsg::Execute {
         contract_addr: profile_contract,
-        msg: to_binary(&ExecuteMsg::UpdateContact {
+        msg: to_json_binary(&ExecuteMsg::UpdateContact {
             profile_addr,
             contact,
             encryption_key,
@@ -67,7 +67,7 @@ pub fn update_profile_trades_count_msg(
 ) -> SubMsg {
     SubMsg::new(CosmosMsg::Wasm(WasmMsg::Execute {
         contract_addr,
-        msg: to_binary(&ExecuteMsg::UpdateTradesCount {
+        msg: to_json_binary(&ExecuteMsg::UpdateTradesCount {
             profile_addr,
             trade_state,
         })
@@ -83,7 +83,7 @@ pub fn update_profile_active_offers_msg(
 ) -> SubMsg {
     SubMsg::new(CosmosMsg::Wasm(WasmMsg::Execute {
         contract_addr,
-        msg: to_binary(&ExecuteMsg::UpdateActiveOffers {
+        msg: to_json_binary(&ExecuteMsg::UpdateActiveOffers {
             profile_addr,
             offer_state,
         })
@@ -190,7 +190,7 @@ impl ProfileModel<'_> {
     ) -> StdResult<Vec<Profile>> {
         let result = profiles()
             .idx
-            .trades_count
+            .owner
             .range(deps.storage, None, None, Order::Descending)
             .take(limit as usize)
             .flat_map(|item| item.and_then(|(_, profile)| Ok(profile)))
@@ -200,36 +200,23 @@ impl ProfileModel<'_> {
 }
 
 pub struct ProfileIndexes<'a> {
-    pub address: MultiIndex<'a, String, Profile, String>,
-    pub trades_count: MultiIndex<'a, u64, Profile, String>,
-    pub last_trade: MultiIndex<'a, u64, Profile, String>,
+    pub owner: MultiIndex<'a, Addr, Profile, String>,
 }
 
 impl<'a> IndexList<Profile> for ProfileIndexes<'a> {
     fn get_indexes(&'_ self) -> Box<dyn Iterator<Item = &'_ dyn Index<Profile>> + '_> {
-        let v: Vec<&dyn Index<Profile>> = vec![&self.address, &self.trades_count, &self.last_trade];
+        let v: Vec<&dyn Index<Profile>> = vec![&self.owner];
         Box::new(v.into_iter())
     }
 }
 
-const PROFILES_PK: &str = "profiles_v0_4_0";
-pub fn profiles<'a>() -> IndexedMap<'a, String, Profile, ProfileIndexes<'a>> {
+pub fn profiles() -> IndexedMap<String, Profile, ProfileIndexes<'static>> {
     let indexes = ProfileIndexes {
-        address: MultiIndex::new(
-            |p: &Profile| p.addr.to_string(),
-            PROFILES_PK,
-            "profiles__address",
-        ),
-        trades_count: MultiIndex::new(
-            |p: &Profile| p.released_trades_count,
-            PROFILES_PK,
-            "profiles__trades_count",
-        ),
-        last_trade: MultiIndex::new(
-            |p: &Profile| p.last_trade,
-            PROFILES_PK,
-            "profiles__last_trade",
+        owner: MultiIndex::new(
+            |_, d: &Profile| d.addr.clone(),
+            "profiles",
+            "profiles__owner",
         ),
     };
-    IndexedMap::new(PROFILES_PK, indexes)
+    IndexedMap::new("profiles", indexes)
 }
diff --git a/contracts/cosmwasm/packages/protocol/src/trade.rs b/contracts/cosmwasm/packages/protocol/src/trade.rs
index 68cbdad..52c6c53 100644
--- a/contracts/cosmwasm/packages/protocol/src/trade.rs
+++ b/contracts/cosmwasm/packages/protocol/src/trade.rs
@@ -1,8 +1,8 @@
 use std::fmt::{self, Display};
-use std::ops::{Add, Mul};
+use std::ops::{Add};
 
 use cosmwasm_std::{
-    Addr, BlockInfo, Coin, CustomQuery, Decimal, Deps, Env, MessageInfo, Order, StdResult, Storage,
+    Addr, BlockInfo, Coin, CustomQuery, Deps, Env, MessageInfo, Order, StdResult, Storage,
     Uint128, Uint256,
 };
 use cw20::Denom;
@@ -425,6 +425,7 @@ impl TradeModel<'_> {
         last: Option<u64>,
     ) -> StdResult<Vec<Trade>> {
         let range_from = last.map(Bound::exclusive);
+        let trader_addr = Addr::unchecked(trader);
 
         let result = trades()
             .idx
@@ -432,7 +433,7 @@ impl TradeModel<'_> {
             .range(storage, None, range_from, Order::Descending)
             .filter_map(|item| {
                 item.and_then(|(_, trade)| {
-                    if trade.seller.eq(&trader) || trade.buyer.eq(&trader) {
+                    if trade.seller.eq(&trader_addr) || trade.buyer.eq(&trader_addr) {
                         Ok(Some(trade))
                     } else {
                         Ok(None)
@@ -495,12 +496,12 @@ impl<'a> IndexList<Trade> for TradeIndexes<'a> {
     }
 }
 
-pub fn trades<'a>() -> IndexedMap<'a, u64, Trade, TradeIndexes<'a>> {
+pub fn trades() -> IndexedMap<u64, Trade, TradeIndexes<'static>> {
     let pk_namespace = "trades_v0_4_2";
     let indexes = TradeIndexes {
         collection: UniqueIndex::new(|t| t.id, "trades__collection"),
         arbitrator: MultiIndex::new(
-            |t| t.arbitrator.to_string(),
+            |_, t| t.arbitrator.to_string(),
             pk_namespace,
             "trades__arbitrator",
         ),
@@ -605,21 +606,21 @@ impl ArbitratorModel {
     }
 }
 
-pub fn arbitrators<'a>() -> IndexedMap<'a, &'a str, Arbitrator, ArbitratorIndexes<'a>> {
+pub fn arbitrators() -> IndexedMap<&'static str, Arbitrator, ArbitratorIndexes<'static>> {
     let arbitrators_pk_namespace = "arbitrators_v0_3_0";
     let indexes = ArbitratorIndexes {
         arbitrator: MultiIndex::new(
-            |d: &Arbitrator| d.arbitrator.clone(),
+            |_, d: &Arbitrator| d.arbitrator.clone(),
             arbitrators_pk_namespace,
             "arbitrators__arbitrator",
         ),
         fiat: MultiIndex::new(
-            |d: &Arbitrator| d.fiat.clone().to_string(),
+            |_, d: &Arbitrator| d.fiat.clone().to_string(),
             arbitrators_pk_namespace,
             "arbitrators__asset",
         ),
     };
-    IndexedMap::new(&arbitrators_pk_namespace, indexes)
+    IndexedMap::new(arbitrators_pk_namespace, indexes)
 }
 
 pub struct ArbitratorIndexes<'a> {
@@ -637,11 +638,8 @@ impl<'a> IndexList<Arbitrator> for ArbitratorIndexes<'a> {
 
 pub fn calc_denom_fiat_price(offer_rate: Uint128, denom_fiat_price: Uint256) -> Uint256 {
     let hundred = Uint128::new(100u128);
-    let offer_rate = Decimal::from_ratio(offer_rate.clone(), hundred);
-    let offer_rate = Uint256::from(hundred.mul(offer_rate)); //% 100
-    denom_fiat_price
-        .checked_mul(offer_rate)
-        .unwrap_or(Uint256::zero())
-        .checked_div(Uint256::from(hundred))
-        .unwrap_or(Uint256::zero())
+    let offer_rate = Uint256::from(offer_rate)
+        .checked_mul(Uint256::from(hundred))
+        .unwrap_or_default(); //% 100
+    offer_rate.checked_mul(denom_fiat_price).unwrap_or_default()
 }
